{"ast":null,"code":"/*! firebase-admin v11.5.0 */\n\"use strict\";\n\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tenant = void 0;\nconst validator = require(\"../utils/validator\");\nconst deep_copy_1 = require(\"../utils/deep-copy\");\nconst error_1 = require(\"../utils/error\");\nconst auth_config_1 = require(\"./auth-config\");\n/**\n * Represents a tenant configuration.\n *\n * Multi-tenancy support requires Google Cloud's Identity Platform\n * (GCIP). To learn more about GCIP, including pricing and features,\n * see the {@link https://cloud.google.com/identity-platform | GCIP documentation}.\n *\n * Before multi-tenancy can be used on a Google Cloud Identity Platform project,\n * tenants must be allowed on that project via the Cloud Console UI.\n *\n * A tenant configuration provides information such as the display name, tenant\n * identifier and email authentication configuration.\n * For OIDC/SAML provider configuration management, `TenantAwareAuth` instances should\n * be used instead of a `Tenant` to retrieve the list of configured IdPs on a tenant.\n * When configuring these providers, note that tenants will inherit\n * whitelisted domains and authenticated redirect URIs of their parent project.\n *\n * All other settings of a tenant will also be inherited. These will need to be managed\n * from the Cloud Console UI.\n */\nclass Tenant {\n  /**\n   * The Tenant object constructor.\n   *\n   * @param response - The server side response used to initialize the Tenant object.\n   * @constructor\n   * @internal\n   */\n  constructor(response) {\n    const tenantId = Tenant.getTenantIdFromResourceName(response.name);\n    if (!tenantId) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid tenant response');\n    }\n    this.tenantId = tenantId;\n    this.displayName = response.displayName;\n    try {\n      this.emailSignInConfig_ = new auth_config_1.EmailSignInConfig(response);\n    } catch (e) {\n      // If allowPasswordSignup is undefined, it is disabled by default.\n      this.emailSignInConfig_ = new auth_config_1.EmailSignInConfig({\n        allowPasswordSignup: false\n      });\n    }\n    this.anonymousSignInEnabled = !!response.enableAnonymousUser;\n    if (typeof response.mfaConfig !== 'undefined') {\n      this.multiFactorConfig_ = new auth_config_1.MultiFactorAuthConfig(response.mfaConfig);\n    }\n    if (typeof response.testPhoneNumbers !== 'undefined') {\n      this.testPhoneNumbers = (0, deep_copy_1.deepCopy)(response.testPhoneNumbers || {});\n    }\n    if (typeof response.smsRegionConfig !== 'undefined') {\n      this.smsRegionConfig = (0, deep_copy_1.deepCopy)(response.smsRegionConfig);\n    }\n  }\n  /**\n   * Builds the corresponding server request for a TenantOptions object.\n   *\n   * @param tenantOptions - The properties to convert to a server request.\n   * @param createRequest - Whether this is a create request.\n   * @returns The equivalent server request.\n   *\n   * @internal\n   */\n  static buildServerRequest(tenantOptions, createRequest) {\n    Tenant.validate(tenantOptions, createRequest);\n    let request = {};\n    if (typeof tenantOptions.emailSignInConfig !== 'undefined') {\n      request = auth_config_1.EmailSignInConfig.buildServerRequest(tenantOptions.emailSignInConfig);\n    }\n    if (typeof tenantOptions.displayName !== 'undefined') {\n      request.displayName = tenantOptions.displayName;\n    }\n    if (typeof tenantOptions.anonymousSignInEnabled !== 'undefined') {\n      request.enableAnonymousUser = tenantOptions.anonymousSignInEnabled;\n    }\n    if (typeof tenantOptions.multiFactorConfig !== 'undefined') {\n      request.mfaConfig = auth_config_1.MultiFactorAuthConfig.buildServerRequest(tenantOptions.multiFactorConfig);\n    }\n    if (typeof tenantOptions.testPhoneNumbers !== 'undefined') {\n      // null will clear existing test phone numbers. Translate to empty object.\n      request.testPhoneNumbers = tenantOptions.testPhoneNumbers ?? {};\n    }\n    if (typeof tenantOptions.smsRegionConfig !== 'undefined') {\n      request.smsRegionConfig = tenantOptions.smsRegionConfig;\n    }\n    return request;\n  }\n  /**\n   * Returns the tenant ID corresponding to the resource name if available.\n   *\n   * @param resourceName - The server side resource name\n   * @returns The tenant ID corresponding to the resource, null otherwise.\n   *\n   * @internal\n   */\n  static getTenantIdFromResourceName(resourceName) {\n    // name is of form projects/project1/tenants/tenant1\n    const matchTenantRes = resourceName.match(/\\/tenants\\/(.*)$/);\n    if (!matchTenantRes || matchTenantRes.length < 2) {\n      return null;\n    }\n    return matchTenantRes[1];\n  }\n  /**\n   * Validates a tenant options object. Throws an error on failure.\n   *\n   * @param request - The tenant options object to validate.\n   * @param createRequest - Whether this is a create request.\n   */\n  static validate(request, createRequest) {\n    const validKeys = {\n      displayName: true,\n      emailSignInConfig: true,\n      anonymousSignInEnabled: true,\n      multiFactorConfig: true,\n      testPhoneNumbers: true,\n      smsRegionConfig: true\n    };\n    const label = createRequest ? 'CreateTenantRequest' : 'UpdateTenantRequest';\n    if (!validator.isNonNullObject(request)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${label}\" must be a valid non-null object.`);\n    }\n    // Check for unsupported top level attributes.\n    for (const key in request) {\n      if (!(key in validKeys)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${key}\" is not a valid ${label} parameter.`);\n      }\n    }\n    // Validate displayName type if provided.\n    if (typeof request.displayName !== 'undefined' && !validator.isNonEmptyString(request.displayName)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${label}.displayName\" must be a valid non-empty string.`);\n    }\n    // Validate emailSignInConfig type if provided.\n    if (typeof request.emailSignInConfig !== 'undefined') {\n      // This will throw an error if invalid.\n      auth_config_1.EmailSignInConfig.buildServerRequest(request.emailSignInConfig);\n    }\n    // Validate test phone numbers if provided.\n    if (typeof request.testPhoneNumbers !== 'undefined' && request.testPhoneNumbers !== null) {\n      (0, auth_config_1.validateTestPhoneNumbers)(request.testPhoneNumbers);\n    } else if (request.testPhoneNumbers === null && createRequest) {\n      // null allowed only for update operations.\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${label}.testPhoneNumbers\" must be a non-null object.`);\n    }\n    // Validate multiFactorConfig type if provided.\n    if (typeof request.multiFactorConfig !== 'undefined') {\n      // This will throw an error if invalid.\n      auth_config_1.MultiFactorAuthConfig.buildServerRequest(request.multiFactorConfig);\n    }\n    // Validate SMS Regions Config if provided.\n    if (typeof request.smsRegionConfig != 'undefined') {\n      auth_config_1.SmsRegionsAuthConfig.validate(request.smsRegionConfig);\n    }\n  }\n  /**\n   * The email sign in provider configuration.\n   */\n  get emailSignInConfig() {\n    return this.emailSignInConfig_;\n  }\n  /**\n   * The multi-factor auth configuration on the current tenant.\n   */\n  get multiFactorConfig() {\n    return this.multiFactorConfig_;\n  }\n  /**\n   * Returns a JSON-serializable representation of this object.\n   *\n   * @returns A JSON-serializable representation of this object.\n   */\n  toJSON() {\n    const json = {\n      tenantId: this.tenantId,\n      displayName: this.displayName,\n      emailSignInConfig: this.emailSignInConfig_?.toJSON(),\n      multiFactorConfig: this.multiFactorConfig_?.toJSON(),\n      anonymousSignInEnabled: this.anonymousSignInEnabled,\n      testPhoneNumbers: this.testPhoneNumbers,\n      smsRegionConfig: (0, deep_copy_1.deepCopy)(this.smsRegionConfig)\n    };\n    if (typeof json.multiFactorConfig === 'undefined') {\n      delete json.multiFactorConfig;\n    }\n    if (typeof json.testPhoneNumbers === 'undefined') {\n      delete json.testPhoneNumbers;\n    }\n    if (typeof json.smsRegionConfig === 'undefined') {\n      delete json.smsRegionConfig;\n    }\n    return json;\n  }\n}\nexports.Tenant = Tenant;","map":{"version":3,"names":["Object","defineProperty","exports","value","Tenant","validator","require","deep_copy_1","error_1","auth_config_1","constructor","response","tenantId","getTenantIdFromResourceName","name","FirebaseAuthError","AuthClientErrorCode","INTERNAL_ERROR","displayName","emailSignInConfig_","EmailSignInConfig","e","allowPasswordSignup","anonymousSignInEnabled","enableAnonymousUser","mfaConfig","multiFactorConfig_","MultiFactorAuthConfig","testPhoneNumbers","deepCopy","smsRegionConfig","buildServerRequest","tenantOptions","createRequest","validate","request","emailSignInConfig","multiFactorConfig","resourceName","matchTenantRes","match","length","validKeys","label","isNonNullObject","INVALID_ARGUMENT","key","isNonEmptyString","validateTestPhoneNumbers","SmsRegionsAuthConfig","toJSON","json"],"sources":["/home/yusuf/coding/portfolio/node_modules/firebase-admin/lib/auth/tenant.js"],"sourcesContent":["/*! firebase-admin v11.5.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tenant = void 0;\nconst validator = require(\"../utils/validator\");\nconst deep_copy_1 = require(\"../utils/deep-copy\");\nconst error_1 = require(\"../utils/error\");\nconst auth_config_1 = require(\"./auth-config\");\n/**\n * Represents a tenant configuration.\n *\n * Multi-tenancy support requires Google Cloud's Identity Platform\n * (GCIP). To learn more about GCIP, including pricing and features,\n * see the {@link https://cloud.google.com/identity-platform | GCIP documentation}.\n *\n * Before multi-tenancy can be used on a Google Cloud Identity Platform project,\n * tenants must be allowed on that project via the Cloud Console UI.\n *\n * A tenant configuration provides information such as the display name, tenant\n * identifier and email authentication configuration.\n * For OIDC/SAML provider configuration management, `TenantAwareAuth` instances should\n * be used instead of a `Tenant` to retrieve the list of configured IdPs on a tenant.\n * When configuring these providers, note that tenants will inherit\n * whitelisted domains and authenticated redirect URIs of their parent project.\n *\n * All other settings of a tenant will also be inherited. These will need to be managed\n * from the Cloud Console UI.\n */\nclass Tenant {\n    /**\n     * The Tenant object constructor.\n     *\n     * @param response - The server side response used to initialize the Tenant object.\n     * @constructor\n     * @internal\n     */\n    constructor(response) {\n        const tenantId = Tenant.getTenantIdFromResourceName(response.name);\n        if (!tenantId) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid tenant response');\n        }\n        this.tenantId = tenantId;\n        this.displayName = response.displayName;\n        try {\n            this.emailSignInConfig_ = new auth_config_1.EmailSignInConfig(response);\n        }\n        catch (e) {\n            // If allowPasswordSignup is undefined, it is disabled by default.\n            this.emailSignInConfig_ = new auth_config_1.EmailSignInConfig({\n                allowPasswordSignup: false,\n            });\n        }\n        this.anonymousSignInEnabled = !!response.enableAnonymousUser;\n        if (typeof response.mfaConfig !== 'undefined') {\n            this.multiFactorConfig_ = new auth_config_1.MultiFactorAuthConfig(response.mfaConfig);\n        }\n        if (typeof response.testPhoneNumbers !== 'undefined') {\n            this.testPhoneNumbers = (0, deep_copy_1.deepCopy)(response.testPhoneNumbers || {});\n        }\n        if (typeof response.smsRegionConfig !== 'undefined') {\n            this.smsRegionConfig = (0, deep_copy_1.deepCopy)(response.smsRegionConfig);\n        }\n    }\n    /**\n     * Builds the corresponding server request for a TenantOptions object.\n     *\n     * @param tenantOptions - The properties to convert to a server request.\n     * @param createRequest - Whether this is a create request.\n     * @returns The equivalent server request.\n     *\n     * @internal\n     */\n    static buildServerRequest(tenantOptions, createRequest) {\n        Tenant.validate(tenantOptions, createRequest);\n        let request = {};\n        if (typeof tenantOptions.emailSignInConfig !== 'undefined') {\n            request = auth_config_1.EmailSignInConfig.buildServerRequest(tenantOptions.emailSignInConfig);\n        }\n        if (typeof tenantOptions.displayName !== 'undefined') {\n            request.displayName = tenantOptions.displayName;\n        }\n        if (typeof tenantOptions.anonymousSignInEnabled !== 'undefined') {\n            request.enableAnonymousUser = tenantOptions.anonymousSignInEnabled;\n        }\n        if (typeof tenantOptions.multiFactorConfig !== 'undefined') {\n            request.mfaConfig = auth_config_1.MultiFactorAuthConfig.buildServerRequest(tenantOptions.multiFactorConfig);\n        }\n        if (typeof tenantOptions.testPhoneNumbers !== 'undefined') {\n            // null will clear existing test phone numbers. Translate to empty object.\n            request.testPhoneNumbers = tenantOptions.testPhoneNumbers ?? {};\n        }\n        if (typeof tenantOptions.smsRegionConfig !== 'undefined') {\n            request.smsRegionConfig = tenantOptions.smsRegionConfig;\n        }\n        return request;\n    }\n    /**\n     * Returns the tenant ID corresponding to the resource name if available.\n     *\n     * @param resourceName - The server side resource name\n     * @returns The tenant ID corresponding to the resource, null otherwise.\n     *\n     * @internal\n     */\n    static getTenantIdFromResourceName(resourceName) {\n        // name is of form projects/project1/tenants/tenant1\n        const matchTenantRes = resourceName.match(/\\/tenants\\/(.*)$/);\n        if (!matchTenantRes || matchTenantRes.length < 2) {\n            return null;\n        }\n        return matchTenantRes[1];\n    }\n    /**\n     * Validates a tenant options object. Throws an error on failure.\n     *\n     * @param request - The tenant options object to validate.\n     * @param createRequest - Whether this is a create request.\n     */\n    static validate(request, createRequest) {\n        const validKeys = {\n            displayName: true,\n            emailSignInConfig: true,\n            anonymousSignInEnabled: true,\n            multiFactorConfig: true,\n            testPhoneNumbers: true,\n            smsRegionConfig: true,\n        };\n        const label = createRequest ? 'CreateTenantRequest' : 'UpdateTenantRequest';\n        if (!validator.isNonNullObject(request)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${label}\" must be a valid non-null object.`);\n        }\n        // Check for unsupported top level attributes.\n        for (const key in request) {\n            if (!(key in validKeys)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${key}\" is not a valid ${label} parameter.`);\n            }\n        }\n        // Validate displayName type if provided.\n        if (typeof request.displayName !== 'undefined' &&\n            !validator.isNonEmptyString(request.displayName)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${label}.displayName\" must be a valid non-empty string.`);\n        }\n        // Validate emailSignInConfig type if provided.\n        if (typeof request.emailSignInConfig !== 'undefined') {\n            // This will throw an error if invalid.\n            auth_config_1.EmailSignInConfig.buildServerRequest(request.emailSignInConfig);\n        }\n        // Validate test phone numbers if provided.\n        if (typeof request.testPhoneNumbers !== 'undefined' &&\n            request.testPhoneNumbers !== null) {\n            (0, auth_config_1.validateTestPhoneNumbers)(request.testPhoneNumbers);\n        }\n        else if (request.testPhoneNumbers === null && createRequest) {\n            // null allowed only for update operations.\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${label}.testPhoneNumbers\" must be a non-null object.`);\n        }\n        // Validate multiFactorConfig type if provided.\n        if (typeof request.multiFactorConfig !== 'undefined') {\n            // This will throw an error if invalid.\n            auth_config_1.MultiFactorAuthConfig.buildServerRequest(request.multiFactorConfig);\n        }\n        // Validate SMS Regions Config if provided.\n        if (typeof request.smsRegionConfig != 'undefined') {\n            auth_config_1.SmsRegionsAuthConfig.validate(request.smsRegionConfig);\n        }\n    }\n    /**\n     * The email sign in provider configuration.\n     */\n    get emailSignInConfig() {\n        return this.emailSignInConfig_;\n    }\n    /**\n     * The multi-factor auth configuration on the current tenant.\n     */\n    get multiFactorConfig() {\n        return this.multiFactorConfig_;\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @returns A JSON-serializable representation of this object.\n     */\n    toJSON() {\n        const json = {\n            tenantId: this.tenantId,\n            displayName: this.displayName,\n            emailSignInConfig: this.emailSignInConfig_?.toJSON(),\n            multiFactorConfig: this.multiFactorConfig_?.toJSON(),\n            anonymousSignInEnabled: this.anonymousSignInEnabled,\n            testPhoneNumbers: this.testPhoneNumbers,\n            smsRegionConfig: (0, deep_copy_1.deepCopy)(this.smsRegionConfig),\n        };\n        if (typeof json.multiFactorConfig === 'undefined') {\n            delete json.multiFactorConfig;\n        }\n        if (typeof json.testPhoneNumbers === 'undefined') {\n            delete json.testPhoneNumbers;\n        }\n        if (typeof json.smsRegionConfig === 'undefined') {\n            delete json.smsRegionConfig;\n        }\n        return json;\n    }\n}\nexports.Tenant = Tenant;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}