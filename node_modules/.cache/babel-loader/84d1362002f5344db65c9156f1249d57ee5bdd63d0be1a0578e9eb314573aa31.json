{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Firestore = exports.DEFAULT_MAX_TRANSACTION_ATTEMPTS = exports.MAX_REQUEST_RETRIES = exports.setLogFunction = exports.QueryPartition = exports.CollectionGroup = exports.GeoPoint = exports.FieldPath = exports.DocumentChange = exports.Timestamp = exports.Transaction = exports.WriteResult = exports.WriteBatch = exports.FieldValue = exports.QueryDocumentSnapshot = exports.DocumentSnapshot = exports.BulkWriter = exports.Query = exports.QuerySnapshot = exports.DocumentReference = exports.CollectionReference = void 0;\nconst stream_1 = require(\"stream\");\nconst url_1 = require(\"url\");\nconst backoff_1 = require(\"./backoff\");\nconst bulk_writer_1 = require(\"./bulk-writer\");\nconst bundle_1 = require(\"./bundle\");\nconst convert_1 = require(\"./convert\");\nconst document_reader_1 = require(\"./document-reader\");\nconst document_1 = require(\"./document\");\nconst logger_1 = require(\"./logger\");\nconst path_1 = require(\"./path\");\nconst pool_1 = require(\"./pool\");\nconst reference_1 = require(\"./reference\");\nconst serializer_1 = require(\"./serializer\");\nconst timestamp_1 = require(\"./timestamp\");\nconst transaction_1 = require(\"./transaction\");\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\nconst write_batch_1 = require(\"./write-batch\");\nconst firestore_client_config_json_1 = require(\"./v1/firestore_client_config.json\");\nconst serviceConfig = firestore_client_config_json_1.interfaces['google.firestore.v1.Firestore'];\nconst collection_group_1 = require(\"./collection-group\");\nObject.defineProperty(exports, \"CollectionGroup\", {\n  enumerable: true,\n  get: function () {\n    return collection_group_1.CollectionGroup;\n  }\n});\nconst recursive_delete_1 = require(\"./recursive-delete\");\nvar reference_2 = require(\"./reference\");\nObject.defineProperty(exports, \"CollectionReference\", {\n  enumerable: true,\n  get: function () {\n    return reference_2.CollectionReference;\n  }\n});\nObject.defineProperty(exports, \"DocumentReference\", {\n  enumerable: true,\n  get: function () {\n    return reference_2.DocumentReference;\n  }\n});\nObject.defineProperty(exports, \"QuerySnapshot\", {\n  enumerable: true,\n  get: function () {\n    return reference_2.QuerySnapshot;\n  }\n});\nObject.defineProperty(exports, \"Query\", {\n  enumerable: true,\n  get: function () {\n    return reference_2.Query;\n  }\n});\nvar bulk_writer_2 = require(\"./bulk-writer\");\nObject.defineProperty(exports, \"BulkWriter\", {\n  enumerable: true,\n  get: function () {\n    return bulk_writer_2.BulkWriter;\n  }\n});\nvar document_2 = require(\"./document\");\nObject.defineProperty(exports, \"DocumentSnapshot\", {\n  enumerable: true,\n  get: function () {\n    return document_2.DocumentSnapshot;\n  }\n});\nObject.defineProperty(exports, \"QueryDocumentSnapshot\", {\n  enumerable: true,\n  get: function () {\n    return document_2.QueryDocumentSnapshot;\n  }\n});\nvar field_value_1 = require(\"./field-value\");\nObject.defineProperty(exports, \"FieldValue\", {\n  enumerable: true,\n  get: function () {\n    return field_value_1.FieldValue;\n  }\n});\nvar write_batch_2 = require(\"./write-batch\");\nObject.defineProperty(exports, \"WriteBatch\", {\n  enumerable: true,\n  get: function () {\n    return write_batch_2.WriteBatch;\n  }\n});\nObject.defineProperty(exports, \"WriteResult\", {\n  enumerable: true,\n  get: function () {\n    return write_batch_2.WriteResult;\n  }\n});\nvar transaction_2 = require(\"./transaction\");\nObject.defineProperty(exports, \"Transaction\", {\n  enumerable: true,\n  get: function () {\n    return transaction_2.Transaction;\n  }\n});\nvar timestamp_2 = require(\"./timestamp\");\nObject.defineProperty(exports, \"Timestamp\", {\n  enumerable: true,\n  get: function () {\n    return timestamp_2.Timestamp;\n  }\n});\nvar document_change_1 = require(\"./document-change\");\nObject.defineProperty(exports, \"DocumentChange\", {\n  enumerable: true,\n  get: function () {\n    return document_change_1.DocumentChange;\n  }\n});\nvar path_2 = require(\"./path\");\nObject.defineProperty(exports, \"FieldPath\", {\n  enumerable: true,\n  get: function () {\n    return path_2.FieldPath;\n  }\n});\nvar geo_point_1 = require(\"./geo-point\");\nObject.defineProperty(exports, \"GeoPoint\", {\n  enumerable: true,\n  get: function () {\n    return geo_point_1.GeoPoint;\n  }\n});\nvar query_partition_1 = require(\"./query-partition\");\nObject.defineProperty(exports, \"QueryPartition\", {\n  enumerable: true,\n  get: function () {\n    return query_partition_1.QueryPartition;\n  }\n});\nvar logger_2 = require(\"./logger\");\nObject.defineProperty(exports, \"setLogFunction\", {\n  enumerable: true,\n  get: function () {\n    return logger_2.setLogFunction;\n  }\n});\nconst libVersion = require('../../package.json').version;\n(0, logger_1.setLibVersion)(libVersion);\n/*!\n * DO NOT REMOVE THE FOLLOWING NAMESPACE DEFINITIONS\n */\n/**\n * @namespace google.protobuf\n */\n/**\n * @namespace google.rpc\n */\n/**\n * @namespace google.longrunning\n */\n/**\n * @namespace google.firestore.v1\n */\n/**\n * @namespace google.firestore.v1beta1\n */\n/**\n * @namespace google.firestore.admin.v1\n */\n/*!\n * HTTP header for the resource prefix to improve routing and project isolation\n * by the backend.\n */\nconst CLOUD_RESOURCE_HEADER = 'google-cloud-resource-prefix';\n/**\n * The maximum number of times to retry idempotent requests.\n * @private\n */\nexports.MAX_REQUEST_RETRIES = 5;\n/**\n * The maximum number of times to attempt a transaction before failing.\n * @private\n */\nexports.DEFAULT_MAX_TRANSACTION_ATTEMPTS = 5;\n/*!\n * The default number of idle GRPC channel to keep.\n */\nconst DEFAULT_MAX_IDLE_CHANNELS = 1;\n/*!\n * The maximum number of concurrent requests supported by a single GRPC channel,\n * as enforced by Google's Frontend. If the SDK issues more than 100 concurrent\n * operations, we need to use more than one GAPIC client since these clients\n * multiplex all requests over a single channel.\n */\nconst MAX_CONCURRENT_REQUESTS_PER_CLIENT = 100;\n/**\n * Document data (e.g. for use with\n * [set()]{@link DocumentReference#set}) consisting of fields mapped\n * to values.\n *\n * @typedef {Object.<string, *>} DocumentData\n */\n/**\n * Converter used by [withConverter()]{@link Query#withConverter} to transform\n * user objects of type T into Firestore data.\n *\n * Using the converter allows you to specify generic type arguments when storing\n * and retrieving objects from Firestore.\n *\n * @example\n * ```\n * class Post {\n *   constructor(readonly title: string, readonly author: string) {}\n *\n *   toString(): string {\n *     return this.title + ', by ' + this.author;\n *   }\n * }\n *\n * const postConverter = {\n *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\n *     return {title: post.title, author: post.author};\n *   },\n *   fromFirestore(\n *     snapshot: FirebaseFirestore.QueryDocumentSnapshot\n *   ): Post {\n *     const data = snapshot.data();\n *     return new Post(data.title, data.author);\n *   }\n * };\n *\n * const postSnap = await Firestore()\n *   .collection('posts')\n *   .withConverter(postConverter)\n *   .doc().get();\n * const post = postSnap.data();\n * if (post !== undefined) {\n *   post.title; // string\n *   post.toString(); // Should be defined\n *   post.someNonExistentProperty; // TS error\n * }\n *\n * ```\n * @property {Function} toFirestore Called by the Firestore SDK to convert a\n * custom model object of type T into a plain Javascript object (suitable for\n * writing directly to the Firestore database).\n * @property {Function} fromFirestore Called by the Firestore SDK to convert\n * Firestore data into an object of type T.\n * @typedef {Object} FirestoreDataConverter\n */\n/**\n * Update data (for use with [update]{@link DocumentReference#update})\n * that contains paths mapped to values. Fields that contain dots\n * reference nested fields within the document.\n *\n * You can update a top-level field in your document by using the field name\n * as a key (e.g. `foo`). The provided value completely replaces the contents\n * for this field.\n *\n * You can also update a nested field directly by using its field path as a key\n * (e.g. `foo.bar`). This nested field update replaces the contents at `bar`\n * but does not modify other data under `foo`.\n *\n * @example\n * ```\n * const documentRef = firestore.doc('coll/doc');\n * documentRef.set({a1: {a2: 'val'}, b1: {b2: 'val'}, c1: {c2: 'val'}});\n * documentRef.update({\n *  b1: {b3: 'val'},\n *  'c1.c3': 'val',\n * });\n * // Value is {a1: {a2: 'val'}, b1: {b3: 'val'}, c1: {c2: 'val', c3: 'val'}}\n *\n * ```\n * @typedef {Object.<string, *>} UpdateData\n */\n/**\n * An options object that configures conditional behavior of\n * [update()]{@link DocumentReference#update} and\n * [delete()]{@link DocumentReference#delete} calls in\n * [DocumentReference]{@link DocumentReference},\n * [WriteBatch]{@link WriteBatch}, [BulkWriter]{@link BulkWriter}, and\n * [Transaction]{@link Transaction}. Using Preconditions, these calls\n * can be restricted to only apply to documents that match the specified\n * conditions.\n *\n * @example\n * ```\n * const documentRef = firestore.doc('coll/doc');\n *\n * documentRef.get().then(snapshot => {\n *   const updateTime = snapshot.updateTime;\n *\n *   console.log(`Deleting document at update time: ${updateTime.toDate()}`);\n *   return documentRef.delete({ lastUpdateTime: updateTime });\n * });\n *\n * ```\n * @property {Timestamp} lastUpdateTime The update time to enforce. If set,\n *  enforces that the document was last updated at lastUpdateTime. Fails the\n *  operation if the document was last updated at a different time.\n * @property {boolean} exists If set, enforces that the target document must\n * or must not exist.\n * @typedef {Object} Precondition\n */\n/**\n * An options object that configures the behavior of\n * [set()]{@link DocumentReference#set} calls in\n * [DocumentReference]{@link DocumentReference},\n * [WriteBatch]{@link WriteBatch}, and\n * [Transaction]{@link Transaction}. These calls can be\n * configured to perform granular merges instead of overwriting the target\n * documents in their entirety by providing a SetOptions object with\n * { merge : true }.\n *\n * @property {boolean} merge Changes the behavior of a set() call to only\n * replace the values specified in its data argument. Fields omitted from the\n * set() call remain untouched.\n * @property {Array<(string|FieldPath)>} mergeFields Changes the behavior of\n * set() calls to only replace the specified field paths. Any field path that is\n * not specified is ignored and remains untouched.\n * It is an error to pass a SetOptions object to a set() call that is missing a\n * value for any of the fields specified here.\n * @typedef {Object} SetOptions\n */\n/**\n * An options object that can be used to configure the behavior of\n * [getAll()]{@link Firestore#getAll} calls. By providing a `fieldMask`, these\n * calls can be configured to only return a subset of fields.\n *\n * @property {Array<(string|FieldPath)>} fieldMask Specifies the set of fields\n * to return and reduces the amount of data transmitted by the backend.\n * Adding a field mask does not filter results. Documents do not need to\n * contain values for all the fields in the mask to be part of the result set.\n * @typedef {Object} ReadOptions\n */\n/**\n * An options object to configure throttling on BulkWriter.\n *\n * Whether to disable or configure throttling. By default, throttling is\n * enabled. `throttling` can be set to either a boolean or a config object.\n * Setting it to `true` will use default values. You can override the defaults\n * by setting it to `false` to disable throttling, or by setting the config\n * values to enable throttling with the provided values.\n *\n * @property {boolean|Object} throttling Whether to disable or enable\n * throttling. Throttling is enabled by default, if the field is set to `true`\n * or if any custom throttling options are provided. `{ initialOpsPerSecond:\n * number }` sets the initial maximum number of operations per second allowed by\n * the throttler. If `initialOpsPerSecond` is not set, the default is 500\n * operations per second. `{ maxOpsPerSecond: number }` sets the maximum number\n * of operations per second allowed by the throttler. If `maxOpsPerSecond` is\n * not set, no maximum is enforced.\n * @typedef {Object} BulkWriterOptions\n */\n/**\n * An error thrown when a BulkWriter operation fails.\n *\n * The error used by {@link BulkWriter~shouldRetryCallback} set in\n * {@link BulkWriter#onWriteError}.\n *\n * @property {GrpcStatus} code The status code of the error.\n * @property {string} message The error message of the error.\n * @property {DocumentReference} documentRef The document reference the\n * operation was performed on.\n * @property {'create' | 'set' | 'update' | 'delete'} operationType The type\n * of operation performed.\n * @property {number} failedAttempts How many times this operation has been\n * attempted unsuccessfully.\n * @typedef {Error} BulkWriterError\n */\n/**\n * Status codes returned by GRPC operations.\n *\n * @see https://github.com/grpc/grpc/blob/master/doc/statuscodes.md\n *\n * @enum {number}\n * @typedef {Object} GrpcStatus\n */\n/**\n * The Firestore client represents a Firestore Database and is the entry point\n * for all Firestore operations.\n *\n * @see [Firestore Documentation]{@link https://firebase.google.com/docs/firestore/}\n *\n * @class\n *\n * @example Install the client library with <a href=\"https://www.npmjs.com/\">npm</a>:\n * ```\n * npm install --save @google-cloud/firestore\n *\n * ```\n * @example Import the client library\n * ```\n * var Firestore = require('@google-cloud/firestore');\n *\n * ```\n * @example Create a client that uses <a href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application Default Credentials (ADC)</a>:\n * ```\n * var firestore = new Firestore();\n *\n * ```\n * @example Create a client with <a href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit credentials</a>:\n * ```\n * var firestore = new Firestore({ projectId:\n * 'your-project-id', keyFilename: '/path/to/keyfile.json'\n * });\n *\n * ```\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:firestore_quickstart\n * Full quickstart example:\n */\nclass Firestore {\n  /**\n   * @param {Object=} settings [Configuration object](#/docs).\n   * @param {string=} settings.projectId The project ID from the Google\n   * Developer's Console, e.g. 'grape-spaceship-123'. We will also check the\n   * environment variable GCLOUD_PROJECT for your project ID.  Can be omitted in\n   * environments that support\n   * {@link https://cloud.google.com/docs/authentication Application Default\n   * Credentials}\n   * @param {string=} settings.keyFilename Local file containing the Service\n   * Account credentials as downloaded from the Google Developers Console. Can\n   * be omitted in environments that support\n   * {@link https://cloud.google.com/docs/authentication Application Default\n   * Credentials}. To configure Firestore with custom credentials, use\n   * `settings.credentials` and provide the `client_email` and `private_key` of\n   * your service account.\n   * @param {{client_email:string=, private_key:string=}=} settings.credentials\n   * The `client_email` and `private_key` properties of the service account\n   * to use with your Firestore project. Can be omitted in environments that\n   * support {@link https://cloud.google.com/docs/authentication Application\n   * Default Credentials}. If your credentials are stored in a JSON file, you\n   * can specify a `keyFilename` instead.\n   * @param {string=} settings.host The host to connect to.\n   * @param {boolean=} settings.ssl Whether to use SSL when connecting.\n   * @param {number=} settings.maxIdleChannels The maximum number of idle GRPC\n   * channels to keep. A smaller number of idle channels reduces memory usage\n   * but increases request latency for clients with fluctuating request rates.\n   * If set to 0, shuts down all GRPC channels when the client becomes idle.\n   * Defaults to 1.\n   * @param {boolean=} settings.ignoreUndefinedProperties Whether to skip nested\n   * properties that are set to `undefined` during object serialization. If set\n   * to `true`, these properties are skipped and not written to Firestore. If\n   * set `false` or omitted, the SDK throws an exception when it encounters\n   * properties of type `undefined`.\n   * @param {boolean=} settings.preferRest Whether to force the use of HTTP/1.1 REST\n   * transport until a method that requires gRPC is called. When a method requires gRPC,\n   * this Firestore client will load dependent gRPC libraries and then use gRPC transport\n   * for communication from that point forward. Currently the only operation\n   * that requires gRPC is creating a snapshot listener with the method\n   * `DocumentReference<T>.onSnapshot()`, `CollectionReference<T>.onSnapshot()`, or\n   * `Query<T>.onSnapshot()`.\n   */\n  constructor(settings) {\n    /**\n     * The configuration options for the GAPIC client.\n     * @private\n     * @internal\n     */\n    this._settings = {};\n    /**\n     * Whether the initialization settings can still be changed by invoking\n     * `settings()`.\n     * @private\n     * @internal\n     */\n    this._settingsFrozen = false;\n    /**\n     * The serializer to use for the Protobuf transformation.\n     * @private\n     * @internal\n     */\n    this._serializer = null;\n    /**\n     * The project ID for this client.\n     *\n     * The project ID is auto-detected during the first request unless a project\n     * ID is passed to the constructor (or provided via `.settings()`).\n     * @private\n     * @internal\n     */\n    this._projectId = undefined;\n    /**\n     * The database ID provided via `.settings()`.\n     *\n     * @private\n     * @internal\n     */\n    this._databaseId = undefined;\n    /**\n     * Count of listeners that have been registered on the client.\n     *\n     * The client can only be terminated when there are no pending writes or\n     * registered listeners.\n     * @private\n     * @internal\n     */\n    this.registeredListenersCount = 0;\n    /**\n     * Number of pending operations on the client.\n     *\n     * The client can only be terminated when there are no pending writes or\n     * registered listeners.\n     * @private\n     * @internal\n     */\n    this.bulkWritersCount = 0;\n    const libraryHeader = {\n      libName: 'gccl',\n      libVersion\n    };\n    if (settings && settings.firebaseVersion) {\n      libraryHeader.libVersion += ' fire/' + settings.firebaseVersion;\n    }\n    this.validateAndApplySettings({\n      ...settings,\n      ...libraryHeader\n    });\n    const retryConfig = serviceConfig.retry_params.default;\n    this._backoffSettings = {\n      initialDelayMs: retryConfig.initial_retry_delay_millis,\n      maxDelayMs: retryConfig.max_retry_delay_millis,\n      backoffFactor: retryConfig.retry_delay_multiplier\n    };\n    const maxIdleChannels = this._settings.maxIdleChannels === undefined ? DEFAULT_MAX_IDLE_CHANNELS : this._settings.maxIdleChannels;\n    this._clientPool = new pool_1.ClientPool(MAX_CONCURRENT_REQUESTS_PER_CLIENT, maxIdleChannels, /* clientFactory= */requiresGrpc => {\n      var _a;\n      let client;\n      // Use the rest fallback if enabled and if the method does not require GRPC\n      const useFallback = !this._settings.preferRest || requiresGrpc ? false : 'rest';\n      let gax;\n      if (useFallback) {\n        if (!this._gaxFallback) {\n          gax = this._gaxFallback = require('google-gax/build/src/fallback');\n        } else {\n          gax = this._gaxFallback;\n        }\n      } else {\n        if (!this._gax) {\n          gax = this._gax = require('google-gax');\n        } else {\n          gax = this._gax;\n        }\n      }\n      if (this._settings.ssl === false) {\n        const grpcModule = (_a = this._settings.grpc) !== null && _a !== void 0 ? _a : require('google-gax').grpc;\n        const sslCreds = grpcModule.credentials.createInsecure();\n        const settings = {\n          sslCreds,\n          ...this._settings,\n          fallback: useFallback\n        };\n        // Since `ssl === false`, if we're using the GAX fallback then\n        // also set the `protocol` option for GAX fallback to force http\n        if (useFallback) {\n          settings.protocol = 'http';\n        }\n        client = new module.exports.v1(settings, gax);\n      } else {\n        client = new module.exports.v1({\n          ...this._settings,\n          fallback: useFallback\n        }, gax);\n      }\n      (0, logger_1.logger)('Firestore', null, 'Initialized Firestore GAPIC Client');\n      return client;\n    }, /* clientDestructor= */client => client.close());\n    (0, logger_1.logger)('Firestore', null, 'Initialized Firestore');\n  }\n  /**\n   * Lazy-load the Firestore's default BulkWriter.\n   *\n   * @private\n   * @internal\n   */\n  getBulkWriter() {\n    if (!this._bulkWriter) {\n      this._bulkWriter = this.bulkWriter();\n    }\n    return this._bulkWriter;\n  }\n  /**\n   * Specifies custom settings to be used to configure the `Firestore`\n   * instance. Can only be invoked once and before any other Firestore method.\n   *\n   * If settings are provided via both `settings()` and the `Firestore`\n   * constructor, both settings objects are merged and any settings provided via\n   * `settings()` take precedence.\n   *\n   * @param {object} settings The settings to use for all Firestore operations.\n   */\n  settings(settings) {\n    (0, validate_1.validateObject)('settings', settings);\n    (0, validate_1.validateString)('settings.projectId', settings.projectId, {\n      optional: true\n    });\n    (0, validate_1.validateString)('settings.databaseId', settings.databaseId, {\n      optional: true\n    });\n    if (this._settingsFrozen) {\n      throw new Error('Firestore has already been initialized. You can only call ' + 'settings() once, and only before calling any other methods on a ' + 'Firestore object.');\n    }\n    const mergedSettings = {\n      ...this._settings,\n      ...settings\n    };\n    this.validateAndApplySettings(mergedSettings);\n    this._settingsFrozen = true;\n  }\n  validateAndApplySettings(settings) {\n    var _a;\n    if (settings.projectId !== undefined) {\n      (0, validate_1.validateString)('settings.projectId', settings.projectId);\n      this._projectId = settings.projectId;\n    }\n    if (settings.databaseId !== undefined) {\n      (0, validate_1.validateString)('settings.databaseId', settings.databaseId);\n      this._databaseId = settings.databaseId;\n    }\n    let url = null;\n    // If the environment variable is set, it should always take precedence\n    // over any user passed in settings.\n    if (process.env.FIRESTORE_EMULATOR_HOST) {\n      (0, validate_1.validateHost)('FIRESTORE_EMULATOR_HOST', process.env.FIRESTORE_EMULATOR_HOST);\n      settings = {\n        ...settings,\n        host: process.env.FIRESTORE_EMULATOR_HOST,\n        ssl: false\n      };\n      url = new url_1.URL(`http://${settings.host}`);\n    } else if (settings.host !== undefined) {\n      (0, validate_1.validateHost)('settings.host', settings.host);\n      url = new url_1.URL(`http://${settings.host}`);\n    }\n    // Only store the host if a valid value was provided in `host`.\n    if (url !== null) {\n      if (settings.servicePath !== undefined && settings.servicePath !== url.hostname || settings.apiEndpoint !== undefined && settings.apiEndpoint !== url.hostname) {\n        // eslint-disable-next-line no-console\n        console.warn(`The provided host (${url.hostname}) in \"settings\" does not ` + `match the existing host (${(_a = settings.servicePath) !== null && _a !== void 0 ? _a : settings.apiEndpoint}). Using the provided host.`);\n      }\n      settings.servicePath = url.hostname;\n      if (url.port !== '' && settings.port === undefined) {\n        settings.port = Number(url.port);\n      }\n      // We need to remove the `host` and `apiEndpoint` setting, in case a user\n      // calls `settings()`, which will compare the the provided `host` to the\n      // existing hostname stored on `servicePath`.\n      delete settings.host;\n      delete settings.apiEndpoint;\n    }\n    if (settings.ssl !== undefined) {\n      (0, validate_1.validateBoolean)('settings.ssl', settings.ssl);\n    }\n    if (settings.maxIdleChannels !== undefined) {\n      (0, validate_1.validateInteger)('settings.maxIdleChannels', settings.maxIdleChannels, {\n        minValue: 0\n      });\n    }\n    this._settings = settings;\n    this._settings.toJson = function () {\n      const temp = Object.assign({}, this);\n      if (temp.credentials) {\n        temp.credentials = {\n          private_key: '***',\n          client_email: '***'\n        };\n      }\n      return temp;\n    };\n    this._serializer = new serializer_1.Serializer(this);\n  }\n  /**\n   * Returns the Project ID for this Firestore instance. Validates that\n   * `initializeIfNeeded()` was called before.\n   *\n   * @private\n   * @internal\n   */\n  get projectId() {\n    if (this._projectId === undefined) {\n      throw new Error('INTERNAL ERROR: Client is not yet ready to issue requests.');\n    }\n    return this._projectId;\n  }\n  /**\n   * Returns the Database ID for this Firestore instance.\n   *\n   * @private\n   * @internal\n   */\n  get databaseId() {\n    return this._databaseId || path_1.DEFAULT_DATABASE_ID;\n  }\n  /**\n   * Returns the root path of the database. Validates that\n   * `initializeIfNeeded()` was called before.\n   *\n   * @private\n   * @internal\n   */\n  get formattedName() {\n    return `projects/${this.projectId}/databases/${this.databaseId}`;\n  }\n  /**\n   * Gets a [DocumentReference]{@link DocumentReference} instance that\n   * refers to the document at the specified path.\n   *\n   * @param {string} documentPath A slash-separated path to a document.\n   * @returns {DocumentReference} The\n   * [DocumentReference]{@link DocumentReference} instance.\n   *\n   * @example\n   * ```\n   * let documentRef = firestore.doc('collection/document');\n   * console.log(`Path of document is ${documentRef.path}`);\n   * ```\n   */\n  doc(documentPath) {\n    (0, path_1.validateResourcePath)('documentPath', documentPath);\n    const path = path_1.ResourcePath.EMPTY.append(documentPath);\n    if (!path.isDocument) {\n      throw new Error(`Value for argument \"documentPath\" must point to a document, but was \"${documentPath}\". Your path does not contain an even number of components.`);\n    }\n    return new reference_1.DocumentReference(this, path);\n  }\n  /**\n   * Gets a [CollectionReference]{@link CollectionReference} instance\n   * that refers to the collection at the specified path.\n   *\n   * @param {string} collectionPath A slash-separated path to a collection.\n   * @returns {CollectionReference} The\n   * [CollectionReference]{@link CollectionReference} instance.\n   *\n   * @example\n   * ```\n   * let collectionRef = firestore.collection('collection');\n   *\n   * // Add a document with an auto-generated ID.\n   * collectionRef.add({foo: 'bar'}).then((documentRef) => {\n   *   console.log(`Added document at ${documentRef.path})`);\n   * });\n   * ```\n   */\n  collection(collectionPath) {\n    (0, path_1.validateResourcePath)('collectionPath', collectionPath);\n    const path = path_1.ResourcePath.EMPTY.append(collectionPath);\n    if (!path.isCollection) {\n      throw new Error(`Value for argument \"collectionPath\" must point to a collection, but was \"${collectionPath}\". Your path does not contain an odd number of components.`);\n    }\n    return new reference_1.CollectionReference(this, path);\n  }\n  /**\n   * Creates and returns a new Query that includes all documents in the\n   * database that are contained in a collection or subcollection with the\n   * given collectionId.\n   *\n   * @param {string} collectionId Identifies the collections to query over.\n   * Every collection or subcollection with this ID as the last segment of its\n   * path will be included. Cannot contain a slash.\n   * @returns {CollectionGroup} The created CollectionGroup.\n   *\n   * @example\n   * ```\n   * let docA = firestore.doc('mygroup/docA').set({foo: 'bar'});\n   * let docB = firestore.doc('abc/def/mygroup/docB').set({foo: 'bar'});\n   *\n   * Promise.all([docA, docB]).then(() => {\n   *    let query = firestore.collectionGroup('mygroup');\n   *    query = query.where('foo', '==', 'bar');\n   *    return query.get().then(snapshot => {\n   *       console.log(`Found ${snapshot.size} documents.`);\n   *    });\n   * });\n   * ```\n   */\n  collectionGroup(collectionId) {\n    if (collectionId.indexOf('/') !== -1) {\n      throw new Error(`Invalid collectionId '${collectionId}'. Collection IDs must not contain '/'.`);\n    }\n    return new collection_group_1.CollectionGroup(this, collectionId, /* converter= */undefined);\n  }\n  /**\n   * Creates a [WriteBatch]{@link WriteBatch}, used for performing\n   * multiple writes as a single atomic operation.\n   *\n   * @returns {WriteBatch} A WriteBatch that operates on this Firestore\n   * client.\n   *\n   * @example\n   * ```\n   * let writeBatch = firestore.batch();\n   *\n   * // Add two documents in an atomic batch.\n   * let data = { foo: 'bar' };\n   * writeBatch.set(firestore.doc('col/doc1'), data);\n   * writeBatch.set(firestore.doc('col/doc2'), data);\n   *\n   * writeBatch.commit().then(res => {\n   *   console.log('Successfully executed batch.');\n   * });\n   * ```\n   */\n  batch() {\n    return new write_batch_1.WriteBatch(this);\n  }\n  /**\n   * Creates a [BulkWriter]{@link BulkWriter}, used for performing\n   * multiple writes in parallel. Gradually ramps up writes as specified\n   * by the 500/50/5 rule.\n   *\n   * If you pass [BulkWriterOptions]{@link BulkWriterOptions}, you can\n   * configure the throttling rates for the created BulkWriter.\n   *\n   * @see [500/50/5 Documentation]{@link https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic}\n   *\n   * @param {BulkWriterOptions=} options BulkWriter options.\n   * @returns {BulkWriter} A BulkWriter that operates on this Firestore\n   * client.\n   *\n   * @example\n   * ```\n   * let bulkWriter = firestore.bulkWriter();\n   *\n   * bulkWriter.create(firestore.doc('col/doc1'), {foo: 'bar'})\n   *   .then(res => {\n   *     console.log(`Added document at ${res.writeTime}`);\n   *   });\n   * bulkWriter.update(firestore.doc('col/doc2'), {foo: 'bar'})\n   *   .then(res => {\n   *     console.log(`Updated document at ${res.writeTime}`);\n   *   });\n   * bulkWriter.delete(firestore.doc('col/doc3'))\n   *   .then(res => {\n   *     console.log(`Deleted document at ${res.writeTime}`);\n   *   });\n   * await bulkWriter.close().then(() => {\n   *   console.log('Executed all writes');\n   * });\n   * ```\n   */\n  bulkWriter(options) {\n    return new bulk_writer_1.BulkWriter(this, options);\n  }\n  /** @private */\n  snapshot_(documentOrName, readTime, encoding) {\n    // TODO: Assert that Firestore Project ID is valid.\n    let convertTimestamp;\n    let convertFields;\n    if (encoding === undefined || encoding === 'protobufJS') {\n      convertTimestamp = data => data;\n      convertFields = data => data;\n    } else if (encoding === 'json') {\n      // Google Cloud Functions calls us with Proto3 JSON format data, which we\n      // must convert to Protobuf JS.\n      convertTimestamp = convert_1.timestampFromJson;\n      convertFields = convert_1.fieldsFromJson;\n    } else {\n      throw new Error('Unsupported encoding format. Expected \"json\" or \"protobufJS\", ' + `but was \"${encoding}\".`);\n    }\n    let ref;\n    let document;\n    if (typeof documentOrName === 'string') {\n      ref = new reference_1.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName));\n      document = new document_1.DocumentSnapshotBuilder(ref);\n    } else {\n      ref = new reference_1.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName.name));\n      document = new document_1.DocumentSnapshotBuilder(ref);\n      document.fieldsProto = documentOrName.fields ? convertFields(documentOrName.fields) : {};\n      document.createTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.createTime, 'documentOrName.createTime'));\n      document.updateTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.updateTime, 'documentOrName.updateTime'));\n    }\n    if (readTime) {\n      document.readTime = timestamp_1.Timestamp.fromProto(convertTimestamp(readTime, 'readTime'));\n    }\n    return document.build();\n  }\n  /**\n   * Creates a new `BundleBuilder` instance to package selected Firestore data into\n   * a bundle.\n   *\n   * @param bundleId. The id of the bundle. When loaded on clients, client SDKs use this id\n   * and the timestamp associated with the built bundle to tell if it has been loaded already.\n   * If not specified, a random identifier will be used.\n   */\n  bundle(name) {\n    return new bundle_1.BundleBuilder(name || (0, util_1.autoId)());\n  }\n  /**\n   * Function executed by {@link Firestore#runTransaction} within the transaction\n   * context.\n   *\n   * @callback Firestore~updateFunction\n   * @template T\n   * @param {Transaction} transaction The transaction object for this\n   * transaction.\n   * @returns {Promise<T>} The promise returned at the end of the transaction.\n   * This promise will be returned by {@link Firestore#runTransaction} if the\n   * transaction completed successfully.\n   */\n  /**\n   * Options object for {@link Firestore#runTransaction} to configure a\n   * read-only transaction.\n   *\n   * @param {true} readOnly Set to true to indicate a read-only transaction.\n   * @param {Timestamp=} readTime If specified, documents are read at the given\n   * time. This may not be more than 60 seconds in the past from when the\n   * request is processed by the server.\n   * @typedef {Object} Firestore~ReadOnlyTransactionOptions\n   */\n  /**\n   * Options object for {@link Firestore#runTransaction} to configure a\n   * read-write transaction.\n   *\n   * @param {false=} readOnly Set to false or omit to indicate a read-write\n   * transaction.\n   * @param {number=} maxAttempts The maximum number of attempts for this\n   * transaction. Defaults to 5.\n   * @typedef {Object} Firestore~ReadWriteTransactionOptions\n   */\n  /**\n   * Executes the given updateFunction and commits the changes applied within\n   * the transaction.\n   *\n   * You can use the transaction object passed to 'updateFunction' to read and\n   * modify Firestore documents under lock. You have to perform all reads before\n   * before you perform any write.\n   *\n   * Transactions can be performed as read-only or read-write transactions. By\n   * default, transactions are executed in read-write mode.\n   *\n   * A read-write transaction obtains a pessimistic lock on all documents that\n   * are read during the transaction. These locks block other transactions,\n   * batched writes, and other non-transactional writes from changing that\n   * document. Any writes in a read-write transactions are committed once\n   * 'updateFunction' resolves, which also releases all locks.\n   *\n   * If a read-write transaction fails with contention, the transaction is\n   * retried up to five times. The `updateFunction` is invoked once for each\n   * attempt.\n   *\n   * Read-only transactions do not lock documents. They can be used to read\n   * documents at a consistent snapshot in time, which may be up to 60 seconds\n   * in the past. Read-only transactions are not retried.\n   *\n   * Transactions time out after 60 seconds if no documents are read.\n   * Transactions that are not committed within than 270 seconds are also\n   * aborted. Any remaining locks are released when a transaction times out.\n   *\n   * @template T\n   * @param {Firestore~updateFunction} updateFunction The user function to\n   * execute within the transaction context.\n   * @param {\n   * Firestore~ReadWriteTransactionOptions|Firestore~ReadOnlyTransactionOptions=\n   * } transactionOptions Transaction options.\n   * @returns {Promise<T>} If the transaction completed successfully or was\n   * explicitly aborted (by the updateFunction returning a failed Promise), the\n   * Promise returned by the updateFunction will be returned here. Else if the\n   * transaction failed, a rejected Promise with the corresponding failure\n   * error will be returned.\n   *\n   * @example\n   * ```\n   * let counterTransaction = firestore.runTransaction(transaction => {\n   *   let documentRef = firestore.doc('col/doc');\n   *   return transaction.get(documentRef).then(doc => {\n   *     if (doc.exists) {\n   *       let count =  doc.get('count') || 0;\n   *       if (count > 10) {\n   *         return Promise.reject('Reached maximum count');\n   *       }\n   *       transaction.update(documentRef, { count: ++count });\n   *       return Promise.resolve(count);\n   *     }\n   *\n   *     transaction.create(documentRef, { count: 1 });\n   *     return Promise.resolve(1);\n   *   });\n   * });\n   *\n   * counterTransaction.then(res => {\n   *   console.log(`Count updated to ${res}`);\n   * });\n   * ```\n   */\n  runTransaction(updateFunction, transactionOptions) {\n    (0, validate_1.validateFunction)('updateFunction', updateFunction);\n    const tag = (0, util_1.requestTag)();\n    let maxAttempts = exports.DEFAULT_MAX_TRANSACTION_ATTEMPTS;\n    let readOnly = false;\n    let readTime;\n    if (transactionOptions) {\n      (0, validate_1.validateObject)('transactionOptions', transactionOptions);\n      (0, validate_1.validateBoolean)('transactionOptions.readOnly', transactionOptions.readOnly, {\n        optional: true\n      });\n      if (transactionOptions.readOnly) {\n        (0, validate_1.validateTimestamp)('transactionOptions.readTime', transactionOptions.readTime, {\n          optional: true\n        });\n        readOnly = true;\n        readTime = transactionOptions.readTime;\n        maxAttempts = 1;\n      } else {\n        (0, validate_1.validateInteger)('transactionOptions.maxAttempts', transactionOptions.maxAttempts, {\n          optional: true,\n          minValue: 1\n        });\n        maxAttempts = transactionOptions.maxAttempts || exports.DEFAULT_MAX_TRANSACTION_ATTEMPTS;\n      }\n    }\n    const transaction = new transaction_1.Transaction(this, tag);\n    return this.initializeIfNeeded(tag).then(() => transaction.runTransaction(updateFunction, {\n      maxAttempts,\n      readOnly,\n      readTime\n    }));\n  }\n  /**\n   * Fetches the root collections that are associated with this Firestore\n   * database.\n   *\n   * @returns {Promise.<Array.<CollectionReference>>} A Promise that resolves\n   * with an array of CollectionReferences.\n   *\n   * @example\n   * ```\n   * firestore.listCollections().then(collections => {\n   *   for (let collection of collections) {\n   *     console.log(`Found collection with id: ${collection.id}`);\n   *   }\n   * });\n   * ```\n   */\n  listCollections() {\n    const rootDocument = new reference_1.DocumentReference(this, path_1.ResourcePath.EMPTY);\n    return rootDocument.listCollections();\n  }\n  /**\n   * Retrieves multiple documents from Firestore.\n   *\n   * The first argument is required and must be of type `DocumentReference`\n   * followed by any additional `DocumentReference` documents. If used, the\n   * optional `ReadOptions` must be the last argument.\n   *\n   * @param {...DocumentReference|ReadOptions} documentRefsOrReadOptions The\n   * `DocumentReferences` to receive, followed by an optional field mask.\n   * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that\n   * contains an array with the resulting document snapshots.\n   *\n   * @example\n   * ```\n   * let docRef1 = firestore.doc('col/doc1');\n   * let docRef2 = firestore.doc('col/doc2');\n   *\n   * firestore.getAll(docRef1, docRef2, { fieldMask: ['user'] }).then(docs => {\n   *   console.log(`First document: ${JSON.stringify(docs[0])}`);\n   *   console.log(`Second document: ${JSON.stringify(docs[1])}`);\n   * });\n   * ```\n   */\n  getAll() {\n    for (var _len = arguments.length, documentRefsOrReadOptions = new Array(_len), _key = 0; _key < _len; _key++) {\n      documentRefsOrReadOptions[_key] = arguments[_key];\n    }\n    (0, validate_1.validateMinNumberOfArguments)('Firestore.getAll', documentRefsOrReadOptions, 1);\n    const {\n      documents,\n      fieldMask\n    } = (0, transaction_1.parseGetAllArguments)(documentRefsOrReadOptions);\n    const tag = (0, util_1.requestTag)();\n    // Capture the error stack to preserve stack tracing across async calls.\n    const stack = Error().stack;\n    return this.initializeIfNeeded(tag).then(() => {\n      const reader = new document_reader_1.DocumentReader(this, documents);\n      reader.fieldMask = fieldMask || undefined;\n      return reader.get(tag);\n    }).catch(err => {\n      throw (0, util_1.wrapError)(err, stack);\n    });\n  }\n  /**\n   * Registers a listener on this client, incrementing the listener count. This\n   * is used to verify that all listeners are unsubscribed when terminate() is\n   * called.\n   *\n   * @private\n   * @internal\n   */\n  registerListener() {\n    this.registeredListenersCount += 1;\n  }\n  /**\n   * Unregisters a listener on this client, decrementing the listener count.\n   * This is used to verify that all listeners are unsubscribed when terminate()\n   * is called.\n   *\n   * @private\n   * @internal\n   */\n  unregisterListener() {\n    this.registeredListenersCount -= 1;\n  }\n  /**\n   * Increments the number of open BulkWriter instances. This is used to verify\n   * that all pending operations are complete when terminate() is called.\n   *\n   * @private\n   * @internal\n   */\n  _incrementBulkWritersCount() {\n    this.bulkWritersCount += 1;\n  }\n  /**\n   * Decrements the number of open BulkWriter instances. This is used to verify\n   * that all pending operations are complete when terminate() is called.\n   *\n   * @private\n   * @internal\n   */\n  _decrementBulkWritersCount() {\n    this.bulkWritersCount -= 1;\n  }\n  /**\n   * Recursively deletes all documents and subcollections at and under the\n   * specified level.\n   *\n   * If any delete fails, the promise is rejected with an error message\n   * containing the number of failed deletes and the stack trace of the last\n   * failed delete. The provided reference is deleted regardless of whether\n   * all deletes succeeded.\n   *\n   * `recursiveDelete()` uses a BulkWriter instance with default settings to\n   * perform the deletes. To customize throttling rates or add success/error\n   * callbacks, pass in a custom BulkWriter instance.\n   *\n   * @param ref The reference of a document or collection to delete.\n   * @param bulkWriter A custom BulkWriter instance used to perform the\n   * deletes.\n   * @return A promise that resolves when all deletes have been performed.\n   * The promise is rejected if any of the deletes fail.\n   *\n   * @example\n   * ```\n   * // Recursively delete a reference and log the references of failures.\n   * const bulkWriter = firestore.bulkWriter();\n   * bulkWriter\n   *   .onWriteError((error) => {\n   *     if (\n   *       error.failedAttempts < MAX_RETRY_ATTEMPTS\n   *     ) {\n   *       return true;\n   *     } else {\n   *       console.log('Failed write at document: ', error.documentRef.path);\n   *       return false;\n   *     }\n   *   });\n   * await firestore.recursiveDelete(docRef, bulkWriter);\n   * ```\n   */\n  recursiveDelete(ref, bulkWriter) {\n    return this._recursiveDelete(ref, recursive_delete_1.RECURSIVE_DELETE_MAX_PENDING_OPS, recursive_delete_1.RECURSIVE_DELETE_MIN_PENDING_OPS, bulkWriter);\n  }\n  /**\n   * This overload is not private in order to test the query resumption with\n   * startAfter() once the RecursiveDelete instance has MAX_PENDING_OPS pending.\n   *\n   * @private\n   * @internal\n   */\n  // Visible for testing\n  _recursiveDelete(ref, maxPendingOps, minPendingOps, bulkWriter) {\n    const writer = bulkWriter !== null && bulkWriter !== void 0 ? bulkWriter : this.getBulkWriter();\n    const deleter = new recursive_delete_1.RecursiveDelete(this, writer, ref, maxPendingOps, minPendingOps);\n    return deleter.run();\n  }\n  /**\n   * Terminates the Firestore client and closes all open streams.\n   *\n   * @return A Promise that resolves when the client is terminated.\n   */\n  terminate() {\n    if (this.registeredListenersCount > 0 || this.bulkWritersCount > 0) {\n      return Promise.reject('All onSnapshot() listeners must be unsubscribed, and all BulkWriter ' + 'instances must be closed before terminating the client. ' + `There are ${this.registeredListenersCount} active listeners and ` + `${this.bulkWritersCount} open BulkWriter instances.`);\n    }\n    return this._clientPool.terminate();\n  }\n  /**\n   * Returns the Project ID to serve as the JSON representation of this\n   * Firestore instance.\n   *\n   * @return An object that contains the project ID (or `undefined` if not yet\n   * available).\n   */\n  toJSON() {\n    return {\n      projectId: this._projectId\n    };\n  }\n  /**\n   * Initializes the client if it is not already initialized. All methods in the\n   * SDK can be used after this method completes.\n   *\n   * @private\n   * @internal\n   * @param requestTag A unique client-assigned identifier that caused this\n   * initialization.\n   * @return A Promise that resolves when the client is initialized.\n   */\n  async initializeIfNeeded(requestTag) {\n    this._settingsFrozen = true;\n    if (this._settings.ssl === false) {\n      // If SSL is false, we assume that we are talking to the emulator. We\n      // provide an Authorization header by default so that the connection is\n      // recognized as admin in Firestore Emulator. (If for some reason we're\n      // not connecting to the emulator, then this will result in denials with\n      // invalid token, rather than behave like clients not logged in. The user\n      // can then provide their own Authorization header, which will take\n      // precedence).\n      this._settings.customHeaders = {\n        Authorization: 'Bearer owner',\n        ...this._settings.customHeaders\n      };\n    }\n    if (this._projectId === undefined) {\n      try {\n        this._projectId = await this._clientPool.run(requestTag, /* requiresGrpc= */false, gapicClient => gapicClient.getProjectId());\n        (0, logger_1.logger)('Firestore.initializeIfNeeded', null, 'Detected project ID: %s', this._projectId);\n      } catch (err) {\n        (0, logger_1.logger)('Firestore.initializeIfNeeded', null, 'Failed to detect project ID: %s', err);\n        return Promise.reject(err);\n      }\n    }\n  }\n  /**\n   * Returns GAX call options that set the cloud resource header.\n   * @private\n   * @internal\n   */\n  createCallOptions(methodName, retryCodes) {\n    var _a;\n    const callOptions = {\n      otherArgs: {\n        headers: {\n          [CLOUD_RESOURCE_HEADER]: this.formattedName,\n          ...this._settings.customHeaders,\n          ...((_a = this._settings[methodName]) === null || _a === void 0 ? void 0 : _a.customHeaders)\n        }\n      }\n    };\n    if (retryCodes) {\n      const retryParams = (0, util_1.getRetryParams)(methodName);\n      callOptions.retry = new (require('google-gax/build/src/fallback').RetryOptions)(retryCodes, retryParams);\n    }\n    return callOptions;\n  }\n  /**\n   * A function returning a Promise that can be retried.\n   *\n   * @private\n   * @internal\n   * @callback retryFunction\n   * @returns {Promise} A Promise indicating the function's success.\n   */\n  /**\n   * Helper method that retries failed Promises.\n   *\n   * If 'delayMs' is specified, waits 'delayMs' between invocations. Otherwise,\n   * schedules the first attempt immediately, and then waits 100 milliseconds\n   * for further attempts.\n   *\n   * @private\n   * @internal\n   * @param methodName Name of the Veneer API endpoint that takes a request\n   * and GAX options.\n   * @param requestTag A unique client-assigned identifier for this request.\n   * @param func Method returning a Promise than can be retried.\n   * @returns A Promise with the function's result if successful within\n   * `attemptsRemaining`. Otherwise, returns the last rejected Promise.\n   */\n  async _retry(methodName, requestTag, func) {\n    const backoff = new backoff_1.ExponentialBackoff();\n    let lastError = undefined;\n    for (let attempt = 0; attempt < exports.MAX_REQUEST_RETRIES; ++attempt) {\n      if (lastError) {\n        (0, logger_1.logger)('Firestore._retry', requestTag, 'Retrying request that failed with error:', lastError);\n      }\n      try {\n        await backoff.backoffAndWait();\n        return await func();\n      } catch (err) {\n        lastError = err;\n        if ((0, util_1.isPermanentRpcError)(err, methodName)) {\n          break;\n        }\n      }\n    }\n    (0, logger_1.logger)('Firestore._retry', requestTag, 'Request failed with error:', lastError);\n    return Promise.reject(lastError);\n  }\n  /**\n   * Waits for the provided stream to become active and returns a paused but\n   * healthy stream. If an error occurs before the first byte is read, the\n   * method rejects the returned Promise.\n   *\n   * @private\n   * @internal\n   * @param backendStream The Node stream to monitor.\n   * @param lifetime A Promise that resolves when the stream receives an 'end',\n   * 'close' or 'finish' message.\n   * @param requestTag A unique client-assigned identifier for this request.\n   * @param request If specified, the request that should be written to the\n   * stream after opening.\n   * @returns A guaranteed healthy stream that should be used instead of\n   * `backendStream`.\n   */\n  _initializeStream(backendStream, lifetime, requestTag, request) {\n    const resultStream = new stream_1.PassThrough({\n      objectMode: true\n    });\n    resultStream.pause();\n    /**\n     * Whether we have resolved the Promise and returned the stream to the\n     * caller.\n     */\n    let streamInitialized = false;\n    return new Promise((resolve, reject) => {\n      function streamReady() {\n        if (!streamInitialized) {\n          streamInitialized = true;\n          (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Releasing stream');\n          resolve(resultStream);\n        }\n      }\n      function streamEnded() {\n        (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Received stream end');\n        resultStream.unpipe(backendStream);\n        resolve(resultStream);\n        lifetime.resolve();\n      }\n      function streamFailed(err) {\n        if (!streamInitialized) {\n          // If we receive an error before we were able to receive any data,\n          // reject this stream.\n          (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Received initial error:', err);\n          reject(err);\n        } else {\n          (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Received stream error:', err);\n          // We execute the forwarding of the 'error' event via setImmediate() as\n          // V8 guarantees that the Promise chain returned from this method\n          // is resolved before any code executed via setImmediate(). This\n          // allows the caller to attach an error handler.\n          setImmediate(() => {\n            resultStream.emit('error', err);\n          });\n        }\n      }\n      backendStream.on('data', () => streamReady());\n      backendStream.on('error', err => streamFailed(err));\n      backendStream.on('end', () => streamEnded());\n      backendStream.on('close', () => streamEnded());\n      backendStream.on('finish', () => streamEnded());\n      backendStream.pipe(resultStream);\n      if (request) {\n        (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Sending request: %j', request);\n        backendStream.write(request, 'utf-8', err => {\n          if (err) {\n            streamFailed(err);\n          } else {\n            (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Marking stream as healthy');\n            streamReady();\n          }\n        });\n      }\n    });\n  }\n  /**\n   * A funnel for all non-streaming API requests, assigning a project ID where\n   * necessary within the request options.\n   *\n   * @private\n   * @internal\n   * @param methodName Name of the Veneer API endpoint that takes a request\n   * and GAX options.\n   * @param request The Protobuf request to send.\n   * @param requestTag A unique client-assigned identifier for this request.\n   * @param retryCodes If provided, a custom list of retry codes. If not\n   * provided, retry is based on the behavior as defined in the ServiceConfig.\n   * @returns A Promise with the request result.\n   */\n  request(methodName, request, requestTag, retryCodes) {\n    const callOptions = this.createCallOptions(methodName, retryCodes);\n    return this._clientPool.run(requestTag, /* requiresGrpc= */false, async gapicClient => {\n      try {\n        (0, logger_1.logger)('Firestore.request', requestTag, 'Sending request: %j', request);\n        const [result] = await gapicClient[methodName](request, callOptions);\n        (0, logger_1.logger)('Firestore.request', requestTag, 'Received response: %j', result);\n        return result;\n      } catch (err) {\n        (0, logger_1.logger)('Firestore.request', requestTag, 'Received error:', err);\n        return Promise.reject(err);\n      }\n    });\n  }\n  /**\n   * A funnel for streaming API requests, assigning a project ID where necessary\n   * within the request options.\n   *\n   * The stream is returned in paused state and needs to be resumed once all\n   * listeners are attached.\n   *\n   * @private\n   * @internal\n   * @param methodName Name of the streaming Veneer API endpoint that\n   * takes a request and GAX options.\n   * @param bidrectional Whether the request is bidirectional (true) or\n   * unidirectional (false_\n   * @param request The Protobuf request to send.\n   * @param requestTag A unique client-assigned identifier for this request.\n   * @returns A Promise with the resulting read-only stream.\n   */\n  requestStream(methodName, bidrectional, request, requestTag) {\n    const callOptions = this.createCallOptions(methodName);\n    const bidirectional = methodName === 'listen';\n    return this._retry(methodName, requestTag, () => {\n      const result = new util_1.Deferred();\n      this._clientPool.run(requestTag, bidrectional, async gapicClient => {\n        (0, logger_1.logger)('Firestore.requestStream', requestTag, 'Sending request: %j', request);\n        try {\n          const stream = bidirectional ? gapicClient[methodName](callOptions) : gapicClient[methodName](request, callOptions);\n          const logStream = new stream_1.Transform({\n            objectMode: true,\n            transform: (chunk, encoding, callback) => {\n              (0, logger_1.logger)('Firestore.requestStream', requestTag, 'Received response: %j', chunk);\n              callback();\n            }\n          });\n          stream.pipe(logStream);\n          const lifetime = new util_1.Deferred();\n          const resultStream = await this._initializeStream(stream, lifetime, requestTag, bidirectional ? request : undefined);\n          resultStream.on('end', () => stream.end());\n          result.resolve(resultStream);\n          // While we return the stream to the callee early, we don't want to\n          // release the GAPIC client until the callee has finished processing the\n          // stream.\n          return lifetime.promise;\n        } catch (e) {\n          result.reject(e);\n        }\n      });\n      return result.promise;\n    });\n  }\n}\nexports.Firestore = Firestore;\n/**\n * A logging function that takes a single string.\n *\n * @callback Firestore~logFunction\n * @param {string} Log message\n */\n// tslint:disable-next-line:no-default-export\n/**\n * The default export of the `@google-cloud/firestore` package is the\n * {@link Firestore} class.\n *\n * See {@link Firestore} and {@link ClientConfig} for client methods and\n * configuration options.\n *\n * @module {Firestore} @google-cloud/firestore\n * @alias nodejs-firestore\n *\n * @example Install the client library with <a href=\"https://www.npmjs.com/\">npm</a>:\n * ```\n * npm install --save @google-cloud/firestore\n *\n * ```\n * @example Import the client library\n * ```\n * var Firestore = require('@google-cloud/firestore');\n *\n * ```\n * @example Create a client that uses <a href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application Default Credentials (ADC)</a>:\n * ```\n * var firestore = new Firestore();\n *\n * ```\n * @example Create a client with <a href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit credentials</a>:\n * ```\n * var firestore = new Firestore({ projectId:\n *   'your-project-id', keyFilename: '/path/to/keyfile.json'\n * });\n *\n * ```\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:firestore_quickstart\n * Full quickstart example:\n */\n// tslint:disable-next-line:no-default-export\nexports.default = Firestore;\n// Horrible hack to ensure backwards compatibility with <= 17.0, which allows\n// users to call the default constructor via\n// `const Fs = require(`@google-cloud/firestore`); new Fs()`;\nconst existingExports = module.exports;\nmodule.exports = Firestore;\nmodule.exports = Object.assign(module.exports, existingExports);\n/**\n * {@link v1beta1} factory function.\n *\n * @private\n * @internal\n * @name Firestore.v1beta1\n * @type {function}\n */\nObject.defineProperty(module.exports, 'v1beta1', {\n  // The v1beta1 module is very large. To avoid pulling it in from static\n  // scope, we lazy-load the module.\n  get: () => require('./v1beta1')\n});\n/**\n * {@link v1} factory function.\n *\n * @private\n * @internal\n * @name Firestore.v1\n * @type {function}\n */\nObject.defineProperty(module.exports, 'v1', {\n  // The v1 module is very large. To avoid pulling it in from static\n  // scope, we lazy-load  the module.\n  get: () => require('./v1')\n});\n/**\n * {@link Status} factory function.\n *\n * @private\n * @internal\n * @name Firestore.GrpcStatus\n * @type {function}\n */\nObject.defineProperty(module.exports, 'GrpcStatus', {\n  // The gax module is very large. To avoid pulling it in from static\n  // scope, we lazy-load the module.\n  get: () => require('google-gax').Status\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","Firestore","DEFAULT_MAX_TRANSACTION_ATTEMPTS","MAX_REQUEST_RETRIES","setLogFunction","QueryPartition","CollectionGroup","GeoPoint","FieldPath","DocumentChange","Timestamp","Transaction","WriteResult","WriteBatch","FieldValue","QueryDocumentSnapshot","DocumentSnapshot","BulkWriter","Query","QuerySnapshot","DocumentReference","CollectionReference","stream_1","require","url_1","backoff_1","bulk_writer_1","bundle_1","convert_1","document_reader_1","document_1","logger_1","path_1","pool_1","reference_1","serializer_1","timestamp_1","transaction_1","util_1","validate_1","write_batch_1","firestore_client_config_json_1","serviceConfig","interfaces","collection_group_1","enumerable","get","recursive_delete_1","reference_2","bulk_writer_2","document_2","field_value_1","write_batch_2","transaction_2","timestamp_2","document_change_1","path_2","geo_point_1","query_partition_1","logger_2","libVersion","version","setLibVersion","CLOUD_RESOURCE_HEADER","DEFAULT_MAX_IDLE_CHANNELS","MAX_CONCURRENT_REQUESTS_PER_CLIENT","constructor","settings","_settings","_settingsFrozen","_serializer","_projectId","undefined","_databaseId","registeredListenersCount","bulkWritersCount","libraryHeader","libName","firebaseVersion","validateAndApplySettings","retryConfig","retry_params","default","_backoffSettings","initialDelayMs","initial_retry_delay_millis","maxDelayMs","max_retry_delay_millis","backoffFactor","retry_delay_multiplier","maxIdleChannels","_clientPool","ClientPool","requiresGrpc","_a","client","useFallback","preferRest","gax","_gaxFallback","_gax","ssl","grpcModule","grpc","sslCreds","credentials","createInsecure","fallback","protocol","module","v1","logger","close","getBulkWriter","_bulkWriter","bulkWriter","validateObject","validateString","projectId","optional","databaseId","Error","mergedSettings","url","process","env","FIRESTORE_EMULATOR_HOST","validateHost","host","URL","servicePath","hostname","apiEndpoint","console","warn","port","Number","validateBoolean","validateInteger","minValue","toJson","temp","assign","private_key","client_email","Serializer","DEFAULT_DATABASE_ID","formattedName","doc","documentPath","validateResourcePath","path","ResourcePath","EMPTY","append","isDocument","collection","collectionPath","isCollection","collectionGroup","collectionId","indexOf","batch","options","snapshot_","documentOrName","readTime","encoding","convertTimestamp","convertFields","data","timestampFromJson","fieldsFromJson","ref","document","QualifiedResourcePath","fromSlashSeparatedString","DocumentSnapshotBuilder","name","fieldsProto","fields","createTime","fromProto","updateTime","build","bundle","BundleBuilder","autoId","runTransaction","updateFunction","transactionOptions","validateFunction","tag","requestTag","maxAttempts","readOnly","validateTimestamp","transaction","initializeIfNeeded","then","listCollections","rootDocument","getAll","documentRefsOrReadOptions","validateMinNumberOfArguments","documents","fieldMask","parseGetAllArguments","stack","reader","DocumentReader","catch","err","wrapError","registerListener","unregisterListener","_incrementBulkWritersCount","_decrementBulkWritersCount","recursiveDelete","_recursiveDelete","RECURSIVE_DELETE_MAX_PENDING_OPS","RECURSIVE_DELETE_MIN_PENDING_OPS","maxPendingOps","minPendingOps","writer","deleter","RecursiveDelete","run","terminate","Promise","reject","toJSON","customHeaders","Authorization","gapicClient","getProjectId","createCallOptions","methodName","retryCodes","callOptions","otherArgs","headers","retryParams","getRetryParams","retry","RetryOptions","_retry","func","backoff","ExponentialBackoff","lastError","attempt","backoffAndWait","isPermanentRpcError","_initializeStream","backendStream","lifetime","request","resultStream","PassThrough","objectMode","pause","streamInitialized","resolve","streamReady","streamEnded","unpipe","streamFailed","setImmediate","emit","on","pipe","write","result","requestStream","bidrectional","bidirectional","Deferred","stream","logStream","Transform","transform","chunk","callback","end","promise","e","existingExports","Status"],"sources":["/home/yusuf/coding/portfolio/node_modules/@google-cloud/firestore/build/src/index.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Firestore = exports.DEFAULT_MAX_TRANSACTION_ATTEMPTS = exports.MAX_REQUEST_RETRIES = exports.setLogFunction = exports.QueryPartition = exports.CollectionGroup = exports.GeoPoint = exports.FieldPath = exports.DocumentChange = exports.Timestamp = exports.Transaction = exports.WriteResult = exports.WriteBatch = exports.FieldValue = exports.QueryDocumentSnapshot = exports.DocumentSnapshot = exports.BulkWriter = exports.Query = exports.QuerySnapshot = exports.DocumentReference = exports.CollectionReference = void 0;\nconst stream_1 = require(\"stream\");\nconst url_1 = require(\"url\");\nconst backoff_1 = require(\"./backoff\");\nconst bulk_writer_1 = require(\"./bulk-writer\");\nconst bundle_1 = require(\"./bundle\");\nconst convert_1 = require(\"./convert\");\nconst document_reader_1 = require(\"./document-reader\");\nconst document_1 = require(\"./document\");\nconst logger_1 = require(\"./logger\");\nconst path_1 = require(\"./path\");\nconst pool_1 = require(\"./pool\");\nconst reference_1 = require(\"./reference\");\nconst serializer_1 = require(\"./serializer\");\nconst timestamp_1 = require(\"./timestamp\");\nconst transaction_1 = require(\"./transaction\");\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\nconst write_batch_1 = require(\"./write-batch\");\nconst firestore_client_config_json_1 = require(\"./v1/firestore_client_config.json\");\nconst serviceConfig = firestore_client_config_json_1.interfaces['google.firestore.v1.Firestore'];\nconst collection_group_1 = require(\"./collection-group\");\nObject.defineProperty(exports, \"CollectionGroup\", { enumerable: true, get: function () { return collection_group_1.CollectionGroup; } });\nconst recursive_delete_1 = require(\"./recursive-delete\");\nvar reference_2 = require(\"./reference\");\nObject.defineProperty(exports, \"CollectionReference\", { enumerable: true, get: function () { return reference_2.CollectionReference; } });\nObject.defineProperty(exports, \"DocumentReference\", { enumerable: true, get: function () { return reference_2.DocumentReference; } });\nObject.defineProperty(exports, \"QuerySnapshot\", { enumerable: true, get: function () { return reference_2.QuerySnapshot; } });\nObject.defineProperty(exports, \"Query\", { enumerable: true, get: function () { return reference_2.Query; } });\nvar bulk_writer_2 = require(\"./bulk-writer\");\nObject.defineProperty(exports, \"BulkWriter\", { enumerable: true, get: function () { return bulk_writer_2.BulkWriter; } });\nvar document_2 = require(\"./document\");\nObject.defineProperty(exports, \"DocumentSnapshot\", { enumerable: true, get: function () { return document_2.DocumentSnapshot; } });\nObject.defineProperty(exports, \"QueryDocumentSnapshot\", { enumerable: true, get: function () { return document_2.QueryDocumentSnapshot; } });\nvar field_value_1 = require(\"./field-value\");\nObject.defineProperty(exports, \"FieldValue\", { enumerable: true, get: function () { return field_value_1.FieldValue; } });\nvar write_batch_2 = require(\"./write-batch\");\nObject.defineProperty(exports, \"WriteBatch\", { enumerable: true, get: function () { return write_batch_2.WriteBatch; } });\nObject.defineProperty(exports, \"WriteResult\", { enumerable: true, get: function () { return write_batch_2.WriteResult; } });\nvar transaction_2 = require(\"./transaction\");\nObject.defineProperty(exports, \"Transaction\", { enumerable: true, get: function () { return transaction_2.Transaction; } });\nvar timestamp_2 = require(\"./timestamp\");\nObject.defineProperty(exports, \"Timestamp\", { enumerable: true, get: function () { return timestamp_2.Timestamp; } });\nvar document_change_1 = require(\"./document-change\");\nObject.defineProperty(exports, \"DocumentChange\", { enumerable: true, get: function () { return document_change_1.DocumentChange; } });\nvar path_2 = require(\"./path\");\nObject.defineProperty(exports, \"FieldPath\", { enumerable: true, get: function () { return path_2.FieldPath; } });\nvar geo_point_1 = require(\"./geo-point\");\nObject.defineProperty(exports, \"GeoPoint\", { enumerable: true, get: function () { return geo_point_1.GeoPoint; } });\nvar query_partition_1 = require(\"./query-partition\");\nObject.defineProperty(exports, \"QueryPartition\", { enumerable: true, get: function () { return query_partition_1.QueryPartition; } });\nvar logger_2 = require(\"./logger\");\nObject.defineProperty(exports, \"setLogFunction\", { enumerable: true, get: function () { return logger_2.setLogFunction; } });\nconst libVersion = require('../../package.json').version;\n(0, logger_1.setLibVersion)(libVersion);\n/*!\n * DO NOT REMOVE THE FOLLOWING NAMESPACE DEFINITIONS\n */\n/**\n * @namespace google.protobuf\n */\n/**\n * @namespace google.rpc\n */\n/**\n * @namespace google.longrunning\n */\n/**\n * @namespace google.firestore.v1\n */\n/**\n * @namespace google.firestore.v1beta1\n */\n/**\n * @namespace google.firestore.admin.v1\n */\n/*!\n * HTTP header for the resource prefix to improve routing and project isolation\n * by the backend.\n */\nconst CLOUD_RESOURCE_HEADER = 'google-cloud-resource-prefix';\n/**\n * The maximum number of times to retry idempotent requests.\n * @private\n */\nexports.MAX_REQUEST_RETRIES = 5;\n/**\n * The maximum number of times to attempt a transaction before failing.\n * @private\n */\nexports.DEFAULT_MAX_TRANSACTION_ATTEMPTS = 5;\n/*!\n * The default number of idle GRPC channel to keep.\n */\nconst DEFAULT_MAX_IDLE_CHANNELS = 1;\n/*!\n * The maximum number of concurrent requests supported by a single GRPC channel,\n * as enforced by Google's Frontend. If the SDK issues more than 100 concurrent\n * operations, we need to use more than one GAPIC client since these clients\n * multiplex all requests over a single channel.\n */\nconst MAX_CONCURRENT_REQUESTS_PER_CLIENT = 100;\n/**\n * Document data (e.g. for use with\n * [set()]{@link DocumentReference#set}) consisting of fields mapped\n * to values.\n *\n * @typedef {Object.<string, *>} DocumentData\n */\n/**\n * Converter used by [withConverter()]{@link Query#withConverter} to transform\n * user objects of type T into Firestore data.\n *\n * Using the converter allows you to specify generic type arguments when storing\n * and retrieving objects from Firestore.\n *\n * @example\n * ```\n * class Post {\n *   constructor(readonly title: string, readonly author: string) {}\n *\n *   toString(): string {\n *     return this.title + ', by ' + this.author;\n *   }\n * }\n *\n * const postConverter = {\n *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\n *     return {title: post.title, author: post.author};\n *   },\n *   fromFirestore(\n *     snapshot: FirebaseFirestore.QueryDocumentSnapshot\n *   ): Post {\n *     const data = snapshot.data();\n *     return new Post(data.title, data.author);\n *   }\n * };\n *\n * const postSnap = await Firestore()\n *   .collection('posts')\n *   .withConverter(postConverter)\n *   .doc().get();\n * const post = postSnap.data();\n * if (post !== undefined) {\n *   post.title; // string\n *   post.toString(); // Should be defined\n *   post.someNonExistentProperty; // TS error\n * }\n *\n * ```\n * @property {Function} toFirestore Called by the Firestore SDK to convert a\n * custom model object of type T into a plain Javascript object (suitable for\n * writing directly to the Firestore database).\n * @property {Function} fromFirestore Called by the Firestore SDK to convert\n * Firestore data into an object of type T.\n * @typedef {Object} FirestoreDataConverter\n */\n/**\n * Update data (for use with [update]{@link DocumentReference#update})\n * that contains paths mapped to values. Fields that contain dots\n * reference nested fields within the document.\n *\n * You can update a top-level field in your document by using the field name\n * as a key (e.g. `foo`). The provided value completely replaces the contents\n * for this field.\n *\n * You can also update a nested field directly by using its field path as a key\n * (e.g. `foo.bar`). This nested field update replaces the contents at `bar`\n * but does not modify other data under `foo`.\n *\n * @example\n * ```\n * const documentRef = firestore.doc('coll/doc');\n * documentRef.set({a1: {a2: 'val'}, b1: {b2: 'val'}, c1: {c2: 'val'}});\n * documentRef.update({\n *  b1: {b3: 'val'},\n *  'c1.c3': 'val',\n * });\n * // Value is {a1: {a2: 'val'}, b1: {b3: 'val'}, c1: {c2: 'val', c3: 'val'}}\n *\n * ```\n * @typedef {Object.<string, *>} UpdateData\n */\n/**\n * An options object that configures conditional behavior of\n * [update()]{@link DocumentReference#update} and\n * [delete()]{@link DocumentReference#delete} calls in\n * [DocumentReference]{@link DocumentReference},\n * [WriteBatch]{@link WriteBatch}, [BulkWriter]{@link BulkWriter}, and\n * [Transaction]{@link Transaction}. Using Preconditions, these calls\n * can be restricted to only apply to documents that match the specified\n * conditions.\n *\n * @example\n * ```\n * const documentRef = firestore.doc('coll/doc');\n *\n * documentRef.get().then(snapshot => {\n *   const updateTime = snapshot.updateTime;\n *\n *   console.log(`Deleting document at update time: ${updateTime.toDate()}`);\n *   return documentRef.delete({ lastUpdateTime: updateTime });\n * });\n *\n * ```\n * @property {Timestamp} lastUpdateTime The update time to enforce. If set,\n *  enforces that the document was last updated at lastUpdateTime. Fails the\n *  operation if the document was last updated at a different time.\n * @property {boolean} exists If set, enforces that the target document must\n * or must not exist.\n * @typedef {Object} Precondition\n */\n/**\n * An options object that configures the behavior of\n * [set()]{@link DocumentReference#set} calls in\n * [DocumentReference]{@link DocumentReference},\n * [WriteBatch]{@link WriteBatch}, and\n * [Transaction]{@link Transaction}. These calls can be\n * configured to perform granular merges instead of overwriting the target\n * documents in their entirety by providing a SetOptions object with\n * { merge : true }.\n *\n * @property {boolean} merge Changes the behavior of a set() call to only\n * replace the values specified in its data argument. Fields omitted from the\n * set() call remain untouched.\n * @property {Array<(string|FieldPath)>} mergeFields Changes the behavior of\n * set() calls to only replace the specified field paths. Any field path that is\n * not specified is ignored and remains untouched.\n * It is an error to pass a SetOptions object to a set() call that is missing a\n * value for any of the fields specified here.\n * @typedef {Object} SetOptions\n */\n/**\n * An options object that can be used to configure the behavior of\n * [getAll()]{@link Firestore#getAll} calls. By providing a `fieldMask`, these\n * calls can be configured to only return a subset of fields.\n *\n * @property {Array<(string|FieldPath)>} fieldMask Specifies the set of fields\n * to return and reduces the amount of data transmitted by the backend.\n * Adding a field mask does not filter results. Documents do not need to\n * contain values for all the fields in the mask to be part of the result set.\n * @typedef {Object} ReadOptions\n */\n/**\n * An options object to configure throttling on BulkWriter.\n *\n * Whether to disable or configure throttling. By default, throttling is\n * enabled. `throttling` can be set to either a boolean or a config object.\n * Setting it to `true` will use default values. You can override the defaults\n * by setting it to `false` to disable throttling, or by setting the config\n * values to enable throttling with the provided values.\n *\n * @property {boolean|Object} throttling Whether to disable or enable\n * throttling. Throttling is enabled by default, if the field is set to `true`\n * or if any custom throttling options are provided. `{ initialOpsPerSecond:\n * number }` sets the initial maximum number of operations per second allowed by\n * the throttler. If `initialOpsPerSecond` is not set, the default is 500\n * operations per second. `{ maxOpsPerSecond: number }` sets the maximum number\n * of operations per second allowed by the throttler. If `maxOpsPerSecond` is\n * not set, no maximum is enforced.\n * @typedef {Object} BulkWriterOptions\n */\n/**\n * An error thrown when a BulkWriter operation fails.\n *\n * The error used by {@link BulkWriter~shouldRetryCallback} set in\n * {@link BulkWriter#onWriteError}.\n *\n * @property {GrpcStatus} code The status code of the error.\n * @property {string} message The error message of the error.\n * @property {DocumentReference} documentRef The document reference the\n * operation was performed on.\n * @property {'create' | 'set' | 'update' | 'delete'} operationType The type\n * of operation performed.\n * @property {number} failedAttempts How many times this operation has been\n * attempted unsuccessfully.\n * @typedef {Error} BulkWriterError\n */\n/**\n * Status codes returned by GRPC operations.\n *\n * @see https://github.com/grpc/grpc/blob/master/doc/statuscodes.md\n *\n * @enum {number}\n * @typedef {Object} GrpcStatus\n */\n/**\n * The Firestore client represents a Firestore Database and is the entry point\n * for all Firestore operations.\n *\n * @see [Firestore Documentation]{@link https://firebase.google.com/docs/firestore/}\n *\n * @class\n *\n * @example Install the client library with <a href=\"https://www.npmjs.com/\">npm</a>:\n * ```\n * npm install --save @google-cloud/firestore\n *\n * ```\n * @example Import the client library\n * ```\n * var Firestore = require('@google-cloud/firestore');\n *\n * ```\n * @example Create a client that uses <a href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application Default Credentials (ADC)</a>:\n * ```\n * var firestore = new Firestore();\n *\n * ```\n * @example Create a client with <a href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit credentials</a>:\n * ```\n * var firestore = new Firestore({ projectId:\n * 'your-project-id', keyFilename: '/path/to/keyfile.json'\n * });\n *\n * ```\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:firestore_quickstart\n * Full quickstart example:\n */\nclass Firestore {\n    /**\n     * @param {Object=} settings [Configuration object](#/docs).\n     * @param {string=} settings.projectId The project ID from the Google\n     * Developer's Console, e.g. 'grape-spaceship-123'. We will also check the\n     * environment variable GCLOUD_PROJECT for your project ID.  Can be omitted in\n     * environments that support\n     * {@link https://cloud.google.com/docs/authentication Application Default\n     * Credentials}\n     * @param {string=} settings.keyFilename Local file containing the Service\n     * Account credentials as downloaded from the Google Developers Console. Can\n     * be omitted in environments that support\n     * {@link https://cloud.google.com/docs/authentication Application Default\n     * Credentials}. To configure Firestore with custom credentials, use\n     * `settings.credentials` and provide the `client_email` and `private_key` of\n     * your service account.\n     * @param {{client_email:string=, private_key:string=}=} settings.credentials\n     * The `client_email` and `private_key` properties of the service account\n     * to use with your Firestore project. Can be omitted in environments that\n     * support {@link https://cloud.google.com/docs/authentication Application\n     * Default Credentials}. If your credentials are stored in a JSON file, you\n     * can specify a `keyFilename` instead.\n     * @param {string=} settings.host The host to connect to.\n     * @param {boolean=} settings.ssl Whether to use SSL when connecting.\n     * @param {number=} settings.maxIdleChannels The maximum number of idle GRPC\n     * channels to keep. A smaller number of idle channels reduces memory usage\n     * but increases request latency for clients with fluctuating request rates.\n     * If set to 0, shuts down all GRPC channels when the client becomes idle.\n     * Defaults to 1.\n     * @param {boolean=} settings.ignoreUndefinedProperties Whether to skip nested\n     * properties that are set to `undefined` during object serialization. If set\n     * to `true`, these properties are skipped and not written to Firestore. If\n     * set `false` or omitted, the SDK throws an exception when it encounters\n     * properties of type `undefined`.\n     * @param {boolean=} settings.preferRest Whether to force the use of HTTP/1.1 REST\n     * transport until a method that requires gRPC is called. When a method requires gRPC,\n     * this Firestore client will load dependent gRPC libraries and then use gRPC transport\n     * for communication from that point forward. Currently the only operation\n     * that requires gRPC is creating a snapshot listener with the method\n     * `DocumentReference<T>.onSnapshot()`, `CollectionReference<T>.onSnapshot()`, or\n     * `Query<T>.onSnapshot()`.\n     */\n    constructor(settings) {\n        /**\n         * The configuration options for the GAPIC client.\n         * @private\n         * @internal\n         */\n        this._settings = {};\n        /**\n         * Whether the initialization settings can still be changed by invoking\n         * `settings()`.\n         * @private\n         * @internal\n         */\n        this._settingsFrozen = false;\n        /**\n         * The serializer to use for the Protobuf transformation.\n         * @private\n         * @internal\n         */\n        this._serializer = null;\n        /**\n         * The project ID for this client.\n         *\n         * The project ID is auto-detected during the first request unless a project\n         * ID is passed to the constructor (or provided via `.settings()`).\n         * @private\n         * @internal\n         */\n        this._projectId = undefined;\n        /**\n         * The database ID provided via `.settings()`.\n         *\n         * @private\n         * @internal\n         */\n        this._databaseId = undefined;\n        /**\n         * Count of listeners that have been registered on the client.\n         *\n         * The client can only be terminated when there are no pending writes or\n         * registered listeners.\n         * @private\n         * @internal\n         */\n        this.registeredListenersCount = 0;\n        /**\n         * Number of pending operations on the client.\n         *\n         * The client can only be terminated when there are no pending writes or\n         * registered listeners.\n         * @private\n         * @internal\n         */\n        this.bulkWritersCount = 0;\n        const libraryHeader = {\n            libName: 'gccl',\n            libVersion,\n        };\n        if (settings && settings.firebaseVersion) {\n            libraryHeader.libVersion += ' fire/' + settings.firebaseVersion;\n        }\n        this.validateAndApplySettings({ ...settings, ...libraryHeader });\n        const retryConfig = serviceConfig.retry_params.default;\n        this._backoffSettings = {\n            initialDelayMs: retryConfig.initial_retry_delay_millis,\n            maxDelayMs: retryConfig.max_retry_delay_millis,\n            backoffFactor: retryConfig.retry_delay_multiplier,\n        };\n        const maxIdleChannels = this._settings.maxIdleChannels === undefined\n            ? DEFAULT_MAX_IDLE_CHANNELS\n            : this._settings.maxIdleChannels;\n        this._clientPool = new pool_1.ClientPool(MAX_CONCURRENT_REQUESTS_PER_CLIENT, maxIdleChannels, \n        /* clientFactory= */ (requiresGrpc) => {\n            var _a;\n            let client;\n            // Use the rest fallback if enabled and if the method does not require GRPC\n            const useFallback = !this._settings.preferRest || requiresGrpc ? false : 'rest';\n            let gax;\n            if (useFallback) {\n                if (!this._gaxFallback) {\n                    gax = this._gaxFallback = require('google-gax/build/src/fallback');\n                }\n                else {\n                    gax = this._gaxFallback;\n                }\n            }\n            else {\n                if (!this._gax) {\n                    gax = this._gax = require('google-gax');\n                }\n                else {\n                    gax = this._gax;\n                }\n            }\n            if (this._settings.ssl === false) {\n                const grpcModule = (_a = this._settings.grpc) !== null && _a !== void 0 ? _a : require('google-gax').grpc;\n                const sslCreds = grpcModule.credentials.createInsecure();\n                const settings = {\n                    sslCreds,\n                    ...this._settings,\n                    fallback: useFallback,\n                };\n                // Since `ssl === false`, if we're using the GAX fallback then\n                // also set the `protocol` option for GAX fallback to force http\n                if (useFallback) {\n                    settings.protocol = 'http';\n                }\n                client = new module.exports.v1(settings, gax);\n            }\n            else {\n                client = new module.exports.v1({\n                    ...this._settings,\n                    fallback: useFallback,\n                }, gax);\n            }\n            (0, logger_1.logger)('Firestore', null, 'Initialized Firestore GAPIC Client');\n            return client;\n        }, \n        /* clientDestructor= */ client => client.close());\n        (0, logger_1.logger)('Firestore', null, 'Initialized Firestore');\n    }\n    /**\n     * Lazy-load the Firestore's default BulkWriter.\n     *\n     * @private\n     * @internal\n     */\n    getBulkWriter() {\n        if (!this._bulkWriter) {\n            this._bulkWriter = this.bulkWriter();\n        }\n        return this._bulkWriter;\n    }\n    /**\n     * Specifies custom settings to be used to configure the `Firestore`\n     * instance. Can only be invoked once and before any other Firestore method.\n     *\n     * If settings are provided via both `settings()` and the `Firestore`\n     * constructor, both settings objects are merged and any settings provided via\n     * `settings()` take precedence.\n     *\n     * @param {object} settings The settings to use for all Firestore operations.\n     */\n    settings(settings) {\n        (0, validate_1.validateObject)('settings', settings);\n        (0, validate_1.validateString)('settings.projectId', settings.projectId, { optional: true });\n        (0, validate_1.validateString)('settings.databaseId', settings.databaseId, {\n            optional: true,\n        });\n        if (this._settingsFrozen) {\n            throw new Error('Firestore has already been initialized. You can only call ' +\n                'settings() once, and only before calling any other methods on a ' +\n                'Firestore object.');\n        }\n        const mergedSettings = { ...this._settings, ...settings };\n        this.validateAndApplySettings(mergedSettings);\n        this._settingsFrozen = true;\n    }\n    validateAndApplySettings(settings) {\n        var _a;\n        if (settings.projectId !== undefined) {\n            (0, validate_1.validateString)('settings.projectId', settings.projectId);\n            this._projectId = settings.projectId;\n        }\n        if (settings.databaseId !== undefined) {\n            (0, validate_1.validateString)('settings.databaseId', settings.databaseId);\n            this._databaseId = settings.databaseId;\n        }\n        let url = null;\n        // If the environment variable is set, it should always take precedence\n        // over any user passed in settings.\n        if (process.env.FIRESTORE_EMULATOR_HOST) {\n            (0, validate_1.validateHost)('FIRESTORE_EMULATOR_HOST', process.env.FIRESTORE_EMULATOR_HOST);\n            settings = {\n                ...settings,\n                host: process.env.FIRESTORE_EMULATOR_HOST,\n                ssl: false,\n            };\n            url = new url_1.URL(`http://${settings.host}`);\n        }\n        else if (settings.host !== undefined) {\n            (0, validate_1.validateHost)('settings.host', settings.host);\n            url = new url_1.URL(`http://${settings.host}`);\n        }\n        // Only store the host if a valid value was provided in `host`.\n        if (url !== null) {\n            if ((settings.servicePath !== undefined &&\n                settings.servicePath !== url.hostname) ||\n                (settings.apiEndpoint !== undefined &&\n                    settings.apiEndpoint !== url.hostname)) {\n                // eslint-disable-next-line no-console\n                console.warn(`The provided host (${url.hostname}) in \"settings\" does not ` +\n                    `match the existing host (${(_a = settings.servicePath) !== null && _a !== void 0 ? _a : settings.apiEndpoint}). Using the provided host.`);\n            }\n            settings.servicePath = url.hostname;\n            if (url.port !== '' && settings.port === undefined) {\n                settings.port = Number(url.port);\n            }\n            // We need to remove the `host` and `apiEndpoint` setting, in case a user\n            // calls `settings()`, which will compare the the provided `host` to the\n            // existing hostname stored on `servicePath`.\n            delete settings.host;\n            delete settings.apiEndpoint;\n        }\n        if (settings.ssl !== undefined) {\n            (0, validate_1.validateBoolean)('settings.ssl', settings.ssl);\n        }\n        if (settings.maxIdleChannels !== undefined) {\n            (0, validate_1.validateInteger)('settings.maxIdleChannels', settings.maxIdleChannels, {\n                minValue: 0,\n            });\n        }\n        this._settings = settings;\n        this._settings.toJson = function () {\n            const temp = Object.assign({}, this);\n            if (temp.credentials) {\n                temp.credentials = { private_key: '***', client_email: '***' };\n            }\n            return temp;\n        };\n        this._serializer = new serializer_1.Serializer(this);\n    }\n    /**\n     * Returns the Project ID for this Firestore instance. Validates that\n     * `initializeIfNeeded()` was called before.\n     *\n     * @private\n     * @internal\n     */\n    get projectId() {\n        if (this._projectId === undefined) {\n            throw new Error('INTERNAL ERROR: Client is not yet ready to issue requests.');\n        }\n        return this._projectId;\n    }\n    /**\n     * Returns the Database ID for this Firestore instance.\n     *\n     * @private\n     * @internal\n     */\n    get databaseId() {\n        return this._databaseId || path_1.DEFAULT_DATABASE_ID;\n    }\n    /**\n     * Returns the root path of the database. Validates that\n     * `initializeIfNeeded()` was called before.\n     *\n     * @private\n     * @internal\n     */\n    get formattedName() {\n        return `projects/${this.projectId}/databases/${this.databaseId}`;\n    }\n    /**\n     * Gets a [DocumentReference]{@link DocumentReference} instance that\n     * refers to the document at the specified path.\n     *\n     * @param {string} documentPath A slash-separated path to a document.\n     * @returns {DocumentReference} The\n     * [DocumentReference]{@link DocumentReference} instance.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('collection/document');\n     * console.log(`Path of document is ${documentRef.path}`);\n     * ```\n     */\n    doc(documentPath) {\n        (0, path_1.validateResourcePath)('documentPath', documentPath);\n        const path = path_1.ResourcePath.EMPTY.append(documentPath);\n        if (!path.isDocument) {\n            throw new Error(`Value for argument \"documentPath\" must point to a document, but was \"${documentPath}\". Your path does not contain an even number of components.`);\n        }\n        return new reference_1.DocumentReference(this, path);\n    }\n    /**\n     * Gets a [CollectionReference]{@link CollectionReference} instance\n     * that refers to the collection at the specified path.\n     *\n     * @param {string} collectionPath A slash-separated path to a collection.\n     * @returns {CollectionReference} The\n     * [CollectionReference]{@link CollectionReference} instance.\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('collection');\n     *\n     * // Add a document with an auto-generated ID.\n     * collectionRef.add({foo: 'bar'}).then((documentRef) => {\n     *   console.log(`Added document at ${documentRef.path})`);\n     * });\n     * ```\n     */\n    collection(collectionPath) {\n        (0, path_1.validateResourcePath)('collectionPath', collectionPath);\n        const path = path_1.ResourcePath.EMPTY.append(collectionPath);\n        if (!path.isCollection) {\n            throw new Error(`Value for argument \"collectionPath\" must point to a collection, but was \"${collectionPath}\". Your path does not contain an odd number of components.`);\n        }\n        return new reference_1.CollectionReference(this, path);\n    }\n    /**\n     * Creates and returns a new Query that includes all documents in the\n     * database that are contained in a collection or subcollection with the\n     * given collectionId.\n     *\n     * @param {string} collectionId Identifies the collections to query over.\n     * Every collection or subcollection with this ID as the last segment of its\n     * path will be included. Cannot contain a slash.\n     * @returns {CollectionGroup} The created CollectionGroup.\n     *\n     * @example\n     * ```\n     * let docA = firestore.doc('mygroup/docA').set({foo: 'bar'});\n     * let docB = firestore.doc('abc/def/mygroup/docB').set({foo: 'bar'});\n     *\n     * Promise.all([docA, docB]).then(() => {\n     *    let query = firestore.collectionGroup('mygroup');\n     *    query = query.where('foo', '==', 'bar');\n     *    return query.get().then(snapshot => {\n     *       console.log(`Found ${snapshot.size} documents.`);\n     *    });\n     * });\n     * ```\n     */\n    collectionGroup(collectionId) {\n        if (collectionId.indexOf('/') !== -1) {\n            throw new Error(`Invalid collectionId '${collectionId}'. Collection IDs must not contain '/'.`);\n        }\n        return new collection_group_1.CollectionGroup(this, collectionId, /* converter= */ undefined);\n    }\n    /**\n     * Creates a [WriteBatch]{@link WriteBatch}, used for performing\n     * multiple writes as a single atomic operation.\n     *\n     * @returns {WriteBatch} A WriteBatch that operates on this Firestore\n     * client.\n     *\n     * @example\n     * ```\n     * let writeBatch = firestore.batch();\n     *\n     * // Add two documents in an atomic batch.\n     * let data = { foo: 'bar' };\n     * writeBatch.set(firestore.doc('col/doc1'), data);\n     * writeBatch.set(firestore.doc('col/doc2'), data);\n     *\n     * writeBatch.commit().then(res => {\n     *   console.log('Successfully executed batch.');\n     * });\n     * ```\n     */\n    batch() {\n        return new write_batch_1.WriteBatch(this);\n    }\n    /**\n     * Creates a [BulkWriter]{@link BulkWriter}, used for performing\n     * multiple writes in parallel. Gradually ramps up writes as specified\n     * by the 500/50/5 rule.\n     *\n     * If you pass [BulkWriterOptions]{@link BulkWriterOptions}, you can\n     * configure the throttling rates for the created BulkWriter.\n     *\n     * @see [500/50/5 Documentation]{@link https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic}\n     *\n     * @param {BulkWriterOptions=} options BulkWriter options.\n     * @returns {BulkWriter} A BulkWriter that operates on this Firestore\n     * client.\n     *\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     *\n     * bulkWriter.create(firestore.doc('col/doc1'), {foo: 'bar'})\n     *   .then(res => {\n     *     console.log(`Added document at ${res.writeTime}`);\n     *   });\n     * bulkWriter.update(firestore.doc('col/doc2'), {foo: 'bar'})\n     *   .then(res => {\n     *     console.log(`Updated document at ${res.writeTime}`);\n     *   });\n     * bulkWriter.delete(firestore.doc('col/doc3'))\n     *   .then(res => {\n     *     console.log(`Deleted document at ${res.writeTime}`);\n     *   });\n     * await bulkWriter.close().then(() => {\n     *   console.log('Executed all writes');\n     * });\n     * ```\n     */\n    bulkWriter(options) {\n        return new bulk_writer_1.BulkWriter(this, options);\n    }\n    /** @private */\n    snapshot_(documentOrName, readTime, encoding) {\n        // TODO: Assert that Firestore Project ID is valid.\n        let convertTimestamp;\n        let convertFields;\n        if (encoding === undefined || encoding === 'protobufJS') {\n            convertTimestamp = data => data;\n            convertFields = data => data;\n        }\n        else if (encoding === 'json') {\n            // Google Cloud Functions calls us with Proto3 JSON format data, which we\n            // must convert to Protobuf JS.\n            convertTimestamp = convert_1.timestampFromJson;\n            convertFields = convert_1.fieldsFromJson;\n        }\n        else {\n            throw new Error('Unsupported encoding format. Expected \"json\" or \"protobufJS\", ' +\n                `but was \"${encoding}\".`);\n        }\n        let ref;\n        let document;\n        if (typeof documentOrName === 'string') {\n            ref = new reference_1.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName));\n            document = new document_1.DocumentSnapshotBuilder(ref);\n        }\n        else {\n            ref = new reference_1.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName.name));\n            document = new document_1.DocumentSnapshotBuilder(ref);\n            document.fieldsProto = documentOrName.fields\n                ? convertFields(documentOrName.fields)\n                : {};\n            document.createTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.createTime, 'documentOrName.createTime'));\n            document.updateTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.updateTime, 'documentOrName.updateTime'));\n        }\n        if (readTime) {\n            document.readTime = timestamp_1.Timestamp.fromProto(convertTimestamp(readTime, 'readTime'));\n        }\n        return document.build();\n    }\n    /**\n     * Creates a new `BundleBuilder` instance to package selected Firestore data into\n     * a bundle.\n     *\n     * @param bundleId. The id of the bundle. When loaded on clients, client SDKs use this id\n     * and the timestamp associated with the built bundle to tell if it has been loaded already.\n     * If not specified, a random identifier will be used.\n     */\n    bundle(name) {\n        return new bundle_1.BundleBuilder(name || (0, util_1.autoId)());\n    }\n    /**\n     * Function executed by {@link Firestore#runTransaction} within the transaction\n     * context.\n     *\n     * @callback Firestore~updateFunction\n     * @template T\n     * @param {Transaction} transaction The transaction object for this\n     * transaction.\n     * @returns {Promise<T>} The promise returned at the end of the transaction.\n     * This promise will be returned by {@link Firestore#runTransaction} if the\n     * transaction completed successfully.\n     */\n    /**\n     * Options object for {@link Firestore#runTransaction} to configure a\n     * read-only transaction.\n     *\n     * @param {true} readOnly Set to true to indicate a read-only transaction.\n     * @param {Timestamp=} readTime If specified, documents are read at the given\n     * time. This may not be more than 60 seconds in the past from when the\n     * request is processed by the server.\n     * @typedef {Object} Firestore~ReadOnlyTransactionOptions\n     */\n    /**\n     * Options object for {@link Firestore#runTransaction} to configure a\n     * read-write transaction.\n     *\n     * @param {false=} readOnly Set to false or omit to indicate a read-write\n     * transaction.\n     * @param {number=} maxAttempts The maximum number of attempts for this\n     * transaction. Defaults to 5.\n     * @typedef {Object} Firestore~ReadWriteTransactionOptions\n     */\n    /**\n     * Executes the given updateFunction and commits the changes applied within\n     * the transaction.\n     *\n     * You can use the transaction object passed to 'updateFunction' to read and\n     * modify Firestore documents under lock. You have to perform all reads before\n     * before you perform any write.\n     *\n     * Transactions can be performed as read-only or read-write transactions. By\n     * default, transactions are executed in read-write mode.\n     *\n     * A read-write transaction obtains a pessimistic lock on all documents that\n     * are read during the transaction. These locks block other transactions,\n     * batched writes, and other non-transactional writes from changing that\n     * document. Any writes in a read-write transactions are committed once\n     * 'updateFunction' resolves, which also releases all locks.\n     *\n     * If a read-write transaction fails with contention, the transaction is\n     * retried up to five times. The `updateFunction` is invoked once for each\n     * attempt.\n     *\n     * Read-only transactions do not lock documents. They can be used to read\n     * documents at a consistent snapshot in time, which may be up to 60 seconds\n     * in the past. Read-only transactions are not retried.\n     *\n     * Transactions time out after 60 seconds if no documents are read.\n     * Transactions that are not committed within than 270 seconds are also\n     * aborted. Any remaining locks are released when a transaction times out.\n     *\n     * @template T\n     * @param {Firestore~updateFunction} updateFunction The user function to\n     * execute within the transaction context.\n     * @param {\n     * Firestore~ReadWriteTransactionOptions|Firestore~ReadOnlyTransactionOptions=\n     * } transactionOptions Transaction options.\n     * @returns {Promise<T>} If the transaction completed successfully or was\n     * explicitly aborted (by the updateFunction returning a failed Promise), the\n     * Promise returned by the updateFunction will be returned here. Else if the\n     * transaction failed, a rejected Promise with the corresponding failure\n     * error will be returned.\n     *\n     * @example\n     * ```\n     * let counterTransaction = firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (doc.exists) {\n     *       let count =  doc.get('count') || 0;\n     *       if (count > 10) {\n     *         return Promise.reject('Reached maximum count');\n     *       }\n     *       transaction.update(documentRef, { count: ++count });\n     *       return Promise.resolve(count);\n     *     }\n     *\n     *     transaction.create(documentRef, { count: 1 });\n     *     return Promise.resolve(1);\n     *   });\n     * });\n     *\n     * counterTransaction.then(res => {\n     *   console.log(`Count updated to ${res}`);\n     * });\n     * ```\n     */\n    runTransaction(updateFunction, transactionOptions) {\n        (0, validate_1.validateFunction)('updateFunction', updateFunction);\n        const tag = (0, util_1.requestTag)();\n        let maxAttempts = exports.DEFAULT_MAX_TRANSACTION_ATTEMPTS;\n        let readOnly = false;\n        let readTime;\n        if (transactionOptions) {\n            (0, validate_1.validateObject)('transactionOptions', transactionOptions);\n            (0, validate_1.validateBoolean)('transactionOptions.readOnly', transactionOptions.readOnly, { optional: true });\n            if (transactionOptions.readOnly) {\n                (0, validate_1.validateTimestamp)('transactionOptions.readTime', transactionOptions.readTime, { optional: true });\n                readOnly = true;\n                readTime = transactionOptions.readTime;\n                maxAttempts = 1;\n            }\n            else {\n                (0, validate_1.validateInteger)('transactionOptions.maxAttempts', transactionOptions.maxAttempts, { optional: true, minValue: 1 });\n                maxAttempts =\n                    transactionOptions.maxAttempts || exports.DEFAULT_MAX_TRANSACTION_ATTEMPTS;\n            }\n        }\n        const transaction = new transaction_1.Transaction(this, tag);\n        return this.initializeIfNeeded(tag).then(() => transaction.runTransaction(updateFunction, {\n            maxAttempts,\n            readOnly,\n            readTime,\n        }));\n    }\n    /**\n     * Fetches the root collections that are associated with this Firestore\n     * database.\n     *\n     * @returns {Promise.<Array.<CollectionReference>>} A Promise that resolves\n     * with an array of CollectionReferences.\n     *\n     * @example\n     * ```\n     * firestore.listCollections().then(collections => {\n     *   for (let collection of collections) {\n     *     console.log(`Found collection with id: ${collection.id}`);\n     *   }\n     * });\n     * ```\n     */\n    listCollections() {\n        const rootDocument = new reference_1.DocumentReference(this, path_1.ResourcePath.EMPTY);\n        return rootDocument.listCollections();\n    }\n    /**\n     * Retrieves multiple documents from Firestore.\n     *\n     * The first argument is required and must be of type `DocumentReference`\n     * followed by any additional `DocumentReference` documents. If used, the\n     * optional `ReadOptions` must be the last argument.\n     *\n     * @param {...DocumentReference|ReadOptions} documentRefsOrReadOptions The\n     * `DocumentReferences` to receive, followed by an optional field mask.\n     * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that\n     * contains an array with the resulting document snapshots.\n     *\n     * @example\n     * ```\n     * let docRef1 = firestore.doc('col/doc1');\n     * let docRef2 = firestore.doc('col/doc2');\n     *\n     * firestore.getAll(docRef1, docRef2, { fieldMask: ['user'] }).then(docs => {\n     *   console.log(`First document: ${JSON.stringify(docs[0])}`);\n     *   console.log(`Second document: ${JSON.stringify(docs[1])}`);\n     * });\n     * ```\n     */\n    getAll(...documentRefsOrReadOptions) {\n        (0, validate_1.validateMinNumberOfArguments)('Firestore.getAll', documentRefsOrReadOptions, 1);\n        const { documents, fieldMask } = (0, transaction_1.parseGetAllArguments)(documentRefsOrReadOptions);\n        const tag = (0, util_1.requestTag)();\n        // Capture the error stack to preserve stack tracing across async calls.\n        const stack = Error().stack;\n        return this.initializeIfNeeded(tag)\n            .then(() => {\n            const reader = new document_reader_1.DocumentReader(this, documents);\n            reader.fieldMask = fieldMask || undefined;\n            return reader.get(tag);\n        })\n            .catch(err => {\n            throw (0, util_1.wrapError)(err, stack);\n        });\n    }\n    /**\n     * Registers a listener on this client, incrementing the listener count. This\n     * is used to verify that all listeners are unsubscribed when terminate() is\n     * called.\n     *\n     * @private\n     * @internal\n     */\n    registerListener() {\n        this.registeredListenersCount += 1;\n    }\n    /**\n     * Unregisters a listener on this client, decrementing the listener count.\n     * This is used to verify that all listeners are unsubscribed when terminate()\n     * is called.\n     *\n     * @private\n     * @internal\n     */\n    unregisterListener() {\n        this.registeredListenersCount -= 1;\n    }\n    /**\n     * Increments the number of open BulkWriter instances. This is used to verify\n     * that all pending operations are complete when terminate() is called.\n     *\n     * @private\n     * @internal\n     */\n    _incrementBulkWritersCount() {\n        this.bulkWritersCount += 1;\n    }\n    /**\n     * Decrements the number of open BulkWriter instances. This is used to verify\n     * that all pending operations are complete when terminate() is called.\n     *\n     * @private\n     * @internal\n     */\n    _decrementBulkWritersCount() {\n        this.bulkWritersCount -= 1;\n    }\n    /**\n     * Recursively deletes all documents and subcollections at and under the\n     * specified level.\n     *\n     * If any delete fails, the promise is rejected with an error message\n     * containing the number of failed deletes and the stack trace of the last\n     * failed delete. The provided reference is deleted regardless of whether\n     * all deletes succeeded.\n     *\n     * `recursiveDelete()` uses a BulkWriter instance with default settings to\n     * perform the deletes. To customize throttling rates or add success/error\n     * callbacks, pass in a custom BulkWriter instance.\n     *\n     * @param ref The reference of a document or collection to delete.\n     * @param bulkWriter A custom BulkWriter instance used to perform the\n     * deletes.\n     * @return A promise that resolves when all deletes have been performed.\n     * The promise is rejected if any of the deletes fail.\n     *\n     * @example\n     * ```\n     * // Recursively delete a reference and log the references of failures.\n     * const bulkWriter = firestore.bulkWriter();\n     * bulkWriter\n     *   .onWriteError((error) => {\n     *     if (\n     *       error.failedAttempts < MAX_RETRY_ATTEMPTS\n     *     ) {\n     *       return true;\n     *     } else {\n     *       console.log('Failed write at document: ', error.documentRef.path);\n     *       return false;\n     *     }\n     *   });\n     * await firestore.recursiveDelete(docRef, bulkWriter);\n     * ```\n     */\n    recursiveDelete(ref, bulkWriter) {\n        return this._recursiveDelete(ref, recursive_delete_1.RECURSIVE_DELETE_MAX_PENDING_OPS, recursive_delete_1.RECURSIVE_DELETE_MIN_PENDING_OPS, bulkWriter);\n    }\n    /**\n     * This overload is not private in order to test the query resumption with\n     * startAfter() once the RecursiveDelete instance has MAX_PENDING_OPS pending.\n     *\n     * @private\n     * @internal\n     */\n    // Visible for testing\n    _recursiveDelete(ref, maxPendingOps, minPendingOps, bulkWriter) {\n        const writer = bulkWriter !== null && bulkWriter !== void 0 ? bulkWriter : this.getBulkWriter();\n        const deleter = new recursive_delete_1.RecursiveDelete(this, writer, ref, maxPendingOps, minPendingOps);\n        return deleter.run();\n    }\n    /**\n     * Terminates the Firestore client and closes all open streams.\n     *\n     * @return A Promise that resolves when the client is terminated.\n     */\n    terminate() {\n        if (this.registeredListenersCount > 0 || this.bulkWritersCount > 0) {\n            return Promise.reject('All onSnapshot() listeners must be unsubscribed, and all BulkWriter ' +\n                'instances must be closed before terminating the client. ' +\n                `There are ${this.registeredListenersCount} active listeners and ` +\n                `${this.bulkWritersCount} open BulkWriter instances.`);\n        }\n        return this._clientPool.terminate();\n    }\n    /**\n     * Returns the Project ID to serve as the JSON representation of this\n     * Firestore instance.\n     *\n     * @return An object that contains the project ID (or `undefined` if not yet\n     * available).\n     */\n    toJSON() {\n        return { projectId: this._projectId };\n    }\n    /**\n     * Initializes the client if it is not already initialized. All methods in the\n     * SDK can be used after this method completes.\n     *\n     * @private\n     * @internal\n     * @param requestTag A unique client-assigned identifier that caused this\n     * initialization.\n     * @return A Promise that resolves when the client is initialized.\n     */\n    async initializeIfNeeded(requestTag) {\n        this._settingsFrozen = true;\n        if (this._settings.ssl === false) {\n            // If SSL is false, we assume that we are talking to the emulator. We\n            // provide an Authorization header by default so that the connection is\n            // recognized as admin in Firestore Emulator. (If for some reason we're\n            // not connecting to the emulator, then this will result in denials with\n            // invalid token, rather than behave like clients not logged in. The user\n            // can then provide their own Authorization header, which will take\n            // precedence).\n            this._settings.customHeaders = {\n                Authorization: 'Bearer owner',\n                ...this._settings.customHeaders,\n            };\n        }\n        if (this._projectId === undefined) {\n            try {\n                this._projectId = await this._clientPool.run(requestTag, \n                /* requiresGrpc= */ false, gapicClient => gapicClient.getProjectId());\n                (0, logger_1.logger)('Firestore.initializeIfNeeded', null, 'Detected project ID: %s', this._projectId);\n            }\n            catch (err) {\n                (0, logger_1.logger)('Firestore.initializeIfNeeded', null, 'Failed to detect project ID: %s', err);\n                return Promise.reject(err);\n            }\n        }\n    }\n    /**\n     * Returns GAX call options that set the cloud resource header.\n     * @private\n     * @internal\n     */\n    createCallOptions(methodName, retryCodes) {\n        var _a;\n        const callOptions = {\n            otherArgs: {\n                headers: {\n                    [CLOUD_RESOURCE_HEADER]: this.formattedName,\n                    ...this._settings.customHeaders,\n                    ...(_a = this._settings[methodName]) === null || _a === void 0 ? void 0 : _a.customHeaders,\n                },\n            },\n        };\n        if (retryCodes) {\n            const retryParams = (0, util_1.getRetryParams)(methodName);\n            callOptions.retry =\n                new (require('google-gax/build/src/fallback').RetryOptions)(retryCodes, retryParams);\n        }\n        return callOptions;\n    }\n    /**\n     * A function returning a Promise that can be retried.\n     *\n     * @private\n     * @internal\n     * @callback retryFunction\n     * @returns {Promise} A Promise indicating the function's success.\n     */\n    /**\n     * Helper method that retries failed Promises.\n     *\n     * If 'delayMs' is specified, waits 'delayMs' between invocations. Otherwise,\n     * schedules the first attempt immediately, and then waits 100 milliseconds\n     * for further attempts.\n     *\n     * @private\n     * @internal\n     * @param methodName Name of the Veneer API endpoint that takes a request\n     * and GAX options.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param func Method returning a Promise than can be retried.\n     * @returns A Promise with the function's result if successful within\n     * `attemptsRemaining`. Otherwise, returns the last rejected Promise.\n     */\n    async _retry(methodName, requestTag, func) {\n        const backoff = new backoff_1.ExponentialBackoff();\n        let lastError = undefined;\n        for (let attempt = 0; attempt < exports.MAX_REQUEST_RETRIES; ++attempt) {\n            if (lastError) {\n                (0, logger_1.logger)('Firestore._retry', requestTag, 'Retrying request that failed with error:', lastError);\n            }\n            try {\n                await backoff.backoffAndWait();\n                return await func();\n            }\n            catch (err) {\n                lastError = err;\n                if ((0, util_1.isPermanentRpcError)(err, methodName)) {\n                    break;\n                }\n            }\n        }\n        (0, logger_1.logger)('Firestore._retry', requestTag, 'Request failed with error:', lastError);\n        return Promise.reject(lastError);\n    }\n    /**\n     * Waits for the provided stream to become active and returns a paused but\n     * healthy stream. If an error occurs before the first byte is read, the\n     * method rejects the returned Promise.\n     *\n     * @private\n     * @internal\n     * @param backendStream The Node stream to monitor.\n     * @param lifetime A Promise that resolves when the stream receives an 'end',\n     * 'close' or 'finish' message.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param request If specified, the request that should be written to the\n     * stream after opening.\n     * @returns A guaranteed healthy stream that should be used instead of\n     * `backendStream`.\n     */\n    _initializeStream(backendStream, lifetime, requestTag, request) {\n        const resultStream = new stream_1.PassThrough({ objectMode: true });\n        resultStream.pause();\n        /**\n         * Whether we have resolved the Promise and returned the stream to the\n         * caller.\n         */\n        let streamInitialized = false;\n        return new Promise((resolve, reject) => {\n            function streamReady() {\n                if (!streamInitialized) {\n                    streamInitialized = true;\n                    (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Releasing stream');\n                    resolve(resultStream);\n                }\n            }\n            function streamEnded() {\n                (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Received stream end');\n                resultStream.unpipe(backendStream);\n                resolve(resultStream);\n                lifetime.resolve();\n            }\n            function streamFailed(err) {\n                if (!streamInitialized) {\n                    // If we receive an error before we were able to receive any data,\n                    // reject this stream.\n                    (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Received initial error:', err);\n                    reject(err);\n                }\n                else {\n                    (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Received stream error:', err);\n                    // We execute the forwarding of the 'error' event via setImmediate() as\n                    // V8 guarantees that the Promise chain returned from this method\n                    // is resolved before any code executed via setImmediate(). This\n                    // allows the caller to attach an error handler.\n                    setImmediate(() => {\n                        resultStream.emit('error', err);\n                    });\n                }\n            }\n            backendStream.on('data', () => streamReady());\n            backendStream.on('error', err => streamFailed(err));\n            backendStream.on('end', () => streamEnded());\n            backendStream.on('close', () => streamEnded());\n            backendStream.on('finish', () => streamEnded());\n            backendStream.pipe(resultStream);\n            if (request) {\n                (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Sending request: %j', request);\n                backendStream.write(request, 'utf-8', err => {\n                    if (err) {\n                        streamFailed(err);\n                    }\n                    else {\n                        (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Marking stream as healthy');\n                        streamReady();\n                    }\n                });\n            }\n        });\n    }\n    /**\n     * A funnel for all non-streaming API requests, assigning a project ID where\n     * necessary within the request options.\n     *\n     * @private\n     * @internal\n     * @param methodName Name of the Veneer API endpoint that takes a request\n     * and GAX options.\n     * @param request The Protobuf request to send.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param retryCodes If provided, a custom list of retry codes. If not\n     * provided, retry is based on the behavior as defined in the ServiceConfig.\n     * @returns A Promise with the request result.\n     */\n    request(methodName, request, requestTag, retryCodes) {\n        const callOptions = this.createCallOptions(methodName, retryCodes);\n        return this._clientPool.run(requestTag, \n        /* requiresGrpc= */ false, async (gapicClient) => {\n            try {\n                (0, logger_1.logger)('Firestore.request', requestTag, 'Sending request: %j', request);\n                const [result] = await gapicClient[methodName](request, callOptions);\n                (0, logger_1.logger)('Firestore.request', requestTag, 'Received response: %j', result);\n                return result;\n            }\n            catch (err) {\n                (0, logger_1.logger)('Firestore.request', requestTag, 'Received error:', err);\n                return Promise.reject(err);\n            }\n        });\n    }\n    /**\n     * A funnel for streaming API requests, assigning a project ID where necessary\n     * within the request options.\n     *\n     * The stream is returned in paused state and needs to be resumed once all\n     * listeners are attached.\n     *\n     * @private\n     * @internal\n     * @param methodName Name of the streaming Veneer API endpoint that\n     * takes a request and GAX options.\n     * @param bidrectional Whether the request is bidirectional (true) or\n     * unidirectional (false_\n     * @param request The Protobuf request to send.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @returns A Promise with the resulting read-only stream.\n     */\n    requestStream(methodName, bidrectional, request, requestTag) {\n        const callOptions = this.createCallOptions(methodName);\n        const bidirectional = methodName === 'listen';\n        return this._retry(methodName, requestTag, () => {\n            const result = new util_1.Deferred();\n            this._clientPool.run(requestTag, bidrectional, async (gapicClient) => {\n                (0, logger_1.logger)('Firestore.requestStream', requestTag, 'Sending request: %j', request);\n                try {\n                    const stream = bidirectional\n                        ? gapicClient[methodName](callOptions)\n                        : gapicClient[methodName](request, callOptions);\n                    const logStream = new stream_1.Transform({\n                        objectMode: true,\n                        transform: (chunk, encoding, callback) => {\n                            (0, logger_1.logger)('Firestore.requestStream', requestTag, 'Received response: %j', chunk);\n                            callback();\n                        },\n                    });\n                    stream.pipe(logStream);\n                    const lifetime = new util_1.Deferred();\n                    const resultStream = await this._initializeStream(stream, lifetime, requestTag, bidirectional ? request : undefined);\n                    resultStream.on('end', () => stream.end());\n                    result.resolve(resultStream);\n                    // While we return the stream to the callee early, we don't want to\n                    // release the GAPIC client until the callee has finished processing the\n                    // stream.\n                    return lifetime.promise;\n                }\n                catch (e) {\n                    result.reject(e);\n                }\n            });\n            return result.promise;\n        });\n    }\n}\nexports.Firestore = Firestore;\n/**\n * A logging function that takes a single string.\n *\n * @callback Firestore~logFunction\n * @param {string} Log message\n */\n// tslint:disable-next-line:no-default-export\n/**\n * The default export of the `@google-cloud/firestore` package is the\n * {@link Firestore} class.\n *\n * See {@link Firestore} and {@link ClientConfig} for client methods and\n * configuration options.\n *\n * @module {Firestore} @google-cloud/firestore\n * @alias nodejs-firestore\n *\n * @example Install the client library with <a href=\"https://www.npmjs.com/\">npm</a>:\n * ```\n * npm install --save @google-cloud/firestore\n *\n * ```\n * @example Import the client library\n * ```\n * var Firestore = require('@google-cloud/firestore');\n *\n * ```\n * @example Create a client that uses <a href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application Default Credentials (ADC)</a>:\n * ```\n * var firestore = new Firestore();\n *\n * ```\n * @example Create a client with <a href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit credentials</a>:\n * ```\n * var firestore = new Firestore({ projectId:\n *   'your-project-id', keyFilename: '/path/to/keyfile.json'\n * });\n *\n * ```\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:firestore_quickstart\n * Full quickstart example:\n */\n// tslint:disable-next-line:no-default-export\nexports.default = Firestore;\n// Horrible hack to ensure backwards compatibility with <= 17.0, which allows\n// users to call the default constructor via\n// `const Fs = require(`@google-cloud/firestore`); new Fs()`;\nconst existingExports = module.exports;\nmodule.exports = Firestore;\nmodule.exports = Object.assign(module.exports, existingExports);\n/**\n * {@link v1beta1} factory function.\n *\n * @private\n * @internal\n * @name Firestore.v1beta1\n * @type {function}\n */\nObject.defineProperty(module.exports, 'v1beta1', {\n    // The v1beta1 module is very large. To avoid pulling it in from static\n    // scope, we lazy-load the module.\n    get: () => require('./v1beta1'),\n});\n/**\n * {@link v1} factory function.\n *\n * @private\n * @internal\n * @name Firestore.v1\n * @type {function}\n */\nObject.defineProperty(module.exports, 'v1', {\n    // The v1 module is very large. To avoid pulling it in from static\n    // scope, we lazy-load  the module.\n    get: () => require('./v1'),\n});\n/**\n * {@link Status} factory function.\n *\n * @private\n * @internal\n * @name Firestore.GrpcStatus\n * @type {function}\n */\nObject.defineProperty(module.exports, 'GrpcStatus', {\n    // The gax module is very large. To avoid pulling it in from static\n    // scope, we lazy-load the module.\n    get: () => require('google-gax').Status,\n});\n//# sourceMappingURL=index.js.map"],"mappings":"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O,CAAC,oBAAoB,CAAC,CAACsC,OAAO;AACxD,CAAC,CAAC,EAAE9B,QAAQ,CAAC+B,aAAa,EAAEF,UAAU,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,qBAAqB,GAAG,8BAA8B;AAC5D;AACA;AACA;AACA;AACAhE,OAAO,CAACI,mBAAmB,GAAG,CAAC;AAC/B;AACA;AACA;AACA;AACAJ,OAAO,CAACG,gCAAgC,GAAG,CAAC;AAC5C;AACA;AACA;AACA,MAAM8D,yBAAyB,GAAG,CAAC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kCAAkhE,SAAS,CAAC;EACZ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIiE,WAAW,CAACC,QAAQ,EAAE;IAClB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;IACnB;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,eAAe,GAAG,KAAK;IAC5B;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,UAAU,GAAGC,SAAS;IAC3B;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,WAAW,GAAGD,SAAS;IAC5B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACE,wBAAwB,GAAG,CAAC;IACjC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,gBAAgB,GAAG,CAAC;IACzB,MAAMC,aAAa,GAAG;MAClBC,OAAO,EAAE,MAAM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"},"metadata":{},"sourceType":"script","externalDependencies":[]}