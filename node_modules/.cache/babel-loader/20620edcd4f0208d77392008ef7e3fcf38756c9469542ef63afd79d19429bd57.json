{"ast":null,"code":"/*! firebase-admin v11.5.0 */\n\"use strict\";\n\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AppCheck = void 0;\nconst app_check_api_client_internal_1 = require(\"./app-check-api-client-internal\");\nconst token_generator_1 = require(\"./token-generator\");\nconst token_verifier_1 = require(\"./token-verifier\");\nconst crypto_signer_1 = require(\"../utils/crypto-signer\");\n/**\n * The Firebase `AppCheck` service interface.\n */\nclass AppCheck {\n  /**\n   * @param app - The app for this AppCheck service.\n   * @constructor\n   * @internal\n   */\n  constructor(app) {\n    this.app = app;\n    this.client = new app_check_api_client_internal_1.AppCheckApiClient(app);\n    try {\n      this.tokenGenerator = new token_generator_1.AppCheckTokenGenerator((0, crypto_signer_1.cryptoSignerFromApp)(app));\n    } catch (err) {\n      throw (0, token_generator_1.appCheckErrorFromCryptoSignerError)(err);\n    }\n    this.appCheckTokenVerifier = new token_verifier_1.AppCheckTokenVerifier(app);\n  }\n  /**\n   * Creates a new {@link AppCheckToken} that can be sent\n   * back to a client.\n   *\n   * @param appId - The app ID to use as the JWT app_id.\n   * @param options - Optional options object when creating a new App Check Token.\n   *\n   * @returns A promise that fulfills with a `AppCheckToken`.\n   */\n  createToken(appId, options) {\n    return this.tokenGenerator.createCustomToken(appId, options).then(customToken => {\n      return this.client.exchangeToken(customToken, appId);\n    });\n  }\n  /**\n   * Verifies a Firebase App Check token (JWT). If the token is valid, the promise is\n   * fulfilled with the token's decoded claims; otherwise, the promise is\n   * rejected.\n   *\n   * @param appCheckToken - The App Check token to verify.\n   *\n   * @returns A promise fulfilled with the token's decoded claims\n   *   if the App Check token is valid; otherwise, a rejected promise.\n   */\n  verifyToken(appCheckToken) {\n    return this.appCheckTokenVerifier.verifyToken(appCheckToken).then(decodedToken => {\n      return {\n        appId: decodedToken.app_id,\n        token: decodedToken\n      };\n    });\n  }\n}\nexports.AppCheck = AppCheck;","map":{"version":3,"names":["Object","defineProperty","exports","value","AppCheck","app_check_api_client_internal_1","require","token_generator_1","token_verifier_1","crypto_signer_1","constructor","app","client","AppCheckApiClient","tokenGenerator","AppCheckTokenGenerator","cryptoSignerFromApp","err","appCheckErrorFromCryptoSignerError","appCheckTokenVerifier","AppCheckTokenVerifier","createToken","appId","options","createCustomToken","then","customToken","exchangeToken","verifyToken","appCheckToken","decodedToken","app_id","token"],"sources":["/home/yusuf/coding/portfolio/node_modules/firebase-admin/lib/app-check/app-check.js"],"sourcesContent":["/*! firebase-admin v11.5.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AppCheck = void 0;\nconst app_check_api_client_internal_1 = require(\"./app-check-api-client-internal\");\nconst token_generator_1 = require(\"./token-generator\");\nconst token_verifier_1 = require(\"./token-verifier\");\nconst crypto_signer_1 = require(\"../utils/crypto-signer\");\n/**\n * The Firebase `AppCheck` service interface.\n */\nclass AppCheck {\n    /**\n     * @param app - The app for this AppCheck service.\n     * @constructor\n     * @internal\n     */\n    constructor(app) {\n        this.app = app;\n        this.client = new app_check_api_client_internal_1.AppCheckApiClient(app);\n        try {\n            this.tokenGenerator = new token_generator_1.AppCheckTokenGenerator((0, crypto_signer_1.cryptoSignerFromApp)(app));\n        }\n        catch (err) {\n            throw (0, token_generator_1.appCheckErrorFromCryptoSignerError)(err);\n        }\n        this.appCheckTokenVerifier = new token_verifier_1.AppCheckTokenVerifier(app);\n    }\n    /**\n     * Creates a new {@link AppCheckToken} that can be sent\n     * back to a client.\n     *\n     * @param appId - The app ID to use as the JWT app_id.\n     * @param options - Optional options object when creating a new App Check Token.\n     *\n     * @returns A promise that fulfills with a `AppCheckToken`.\n     */\n    createToken(appId, options) {\n        return this.tokenGenerator.createCustomToken(appId, options)\n            .then((customToken) => {\n            return this.client.exchangeToken(customToken, appId);\n        });\n    }\n    /**\n     * Verifies a Firebase App Check token (JWT). If the token is valid, the promise is\n     * fulfilled with the token's decoded claims; otherwise, the promise is\n     * rejected.\n     *\n     * @param appCheckToken - The App Check token to verify.\n     *\n     * @returns A promise fulfilled with the token's decoded claims\n     *   if the App Check token is valid; otherwise, a rejected promise.\n     */\n    verifyToken(appCheckToken) {\n        return this.appCheckTokenVerifier.verifyToken(appCheckToken)\n            .then((decodedToken) => {\n            return {\n                appId: decodedToken.app_id,\n                token: decodedToken,\n            };\n        });\n    }\n}\nexports.AppCheck = AppCheck;\n"],"mappings":"AAAA;AACA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,QAAQ,GAAG,KAAK,CAAC;AACzB,MAAMC,+BAA+B,GAAGC,OAAO,CAAC,iCAAiC,CAAC;AAClF,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AACtD,MAAME,gBAAgB,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AACpD,MAAMG,eAAe,GAAGH,OAAO,CAAC,wBAAwB,CAAC;AACzD;AACA;AACA;AACA,MAAMF,QAAQ,CAAC;EACX;AACJ;AACA;AACA;AACA;EACIM,WAAW,CAACC,GAAG,EAAE;IACb,IAAI,CAACA,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,MAAM,GAAG,IAAIP,+BAA+B,CAACQ,iBAAiB,CAACF,GAAG,CAAC;IACxE,IAAI;MACA,IAAI,CAACG,cAAc,GAAG,IAAIP,iBAAiB,CAACQ,sBAAsB,CAAC,CAAC,CAAC,EAAEN,eAAe,CAACO,mBAAmB,EAAEL,GAAG,CAAC,CAAC;IACrH,CAAC,CACD,OAAOM,GAAG,EAAE;MACR,MAAM,CAAC,CAAC,EAAEV,iBAAiB,CAACW,kCAAkC,EAAED,GAAG,CAAC;IACxE;IACA,IAAI,CAACE,qBAAqB,GAAG,IAAIX,gBAAgB,CAACY,qBAAqB,CAACT,GAAG,CAAC;EAChF;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIU,WAAW,CAACC,KAAK,EAAEC,OAAO,EAAE;IACxB,OAAO,IAAI,CAACT,cAAc,CAACU,iBAAiB,CAACF,KAAK,EAAEC,OAAO,CAAC,CACvDE,IAAI,CAAEC,WAAW,IAAK;MACvB,OAAO,IAAI,CAACd,MAAM,CAACe,aAAa,CAACD,WAAW,EAAEJ,KAAK,CAAC;IACxD,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIM,WAAW,CAACC,aAAa,EAAE;IACvB,OAAO,IAAI,CAACV,qBAAqB,CAACS,WAAW,CAACC,aAAa,CAAC,CACvDJ,IAAI,CAAEK,YAAY,IAAK;MACxB,OAAO;QACHR,KAAK,EAAEQ,YAAY,CAACC,MAAM;QAC1BC,KAAK,EAAEF;MACX,CAAC;IACL,CAAC,CAAC;EACN;AACJ;AACA5B,OAAO,CAACE,QAAQ,GAAGA,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}