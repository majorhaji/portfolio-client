{"ast":null,"code":"/*! firebase-admin v11.5.0 */\n\"use strict\";\n\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExponentialBackoffPoller = exports.ApiSettings = exports.AuthorizedHttpClient = exports.parseHttpResponse = exports.HttpClient = exports.defaultRetryConfig = exports.HttpError = void 0;\nconst error_1 = require(\"./error\");\nconst validator = require(\"./validator\");\nconst http = require(\"http\");\nconst https = require(\"https\");\nconst url = require(\"url\");\nconst events_1 = require(\"events\");\nclass DefaultHttpResponse {\n  /**\n   * Constructs a new HttpResponse from the given LowLevelResponse.\n   */\n  constructor(resp) {\n    this.status = resp.status;\n    this.headers = resp.headers;\n    this.text = resp.data;\n    try {\n      if (!resp.data) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'HTTP response missing data.');\n      }\n      this.parsedData = JSON.parse(resp.data);\n    } catch (err) {\n      this.parsedData = undefined;\n      this.parseError = err;\n    }\n    this.request = `${resp.config.method} ${resp.config.url}`;\n  }\n  get data() {\n    if (this.isJson()) {\n      return this.parsedData;\n    }\n    throw new error_1.FirebaseAppError(error_1.AppErrorCodes.UNABLE_TO_PARSE_RESPONSE, `Error while parsing response data: \"${this.parseError.toString()}\". Raw server ` + `response: \"${this.text}\". Status code: \"${this.status}\". Outgoing ` + `request: \"${this.request}.\"`);\n  }\n  isJson() {\n    return typeof this.parsedData !== 'undefined';\n  }\n}\n/**\n * Represents a multipart HTTP response. Parts that constitute the response body can be accessed\n * via the multipart getter. Getters for text and data throw errors.\n */\nclass MultipartHttpResponse {\n  constructor(resp) {\n    this.status = resp.status;\n    this.headers = resp.headers;\n    this.multipart = resp.multipart;\n  }\n  get text() {\n    throw new error_1.FirebaseAppError(error_1.AppErrorCodes.UNABLE_TO_PARSE_RESPONSE, 'Unable to parse multipart payload as text');\n  }\n  get data() {\n    throw new error_1.FirebaseAppError(error_1.AppErrorCodes.UNABLE_TO_PARSE_RESPONSE, 'Unable to parse multipart payload as JSON');\n  }\n  isJson() {\n    return false;\n  }\n}\nclass HttpError extends Error {\n  constructor(response) {\n    super(`Server responded with status ${response.status}.`);\n    this.response = response;\n    // Set the prototype so that instanceof checks will work correctly.\n    // See: https://github.com/Microsoft/TypeScript/issues/13965\n    Object.setPrototypeOf(this, HttpError.prototype);\n  }\n}\nexports.HttpError = HttpError;\n/**\n * Default retry configuration for HTTP requests. Retries up to 4 times on connection reset and timeout errors\n * as well as HTTP 503 errors. Exposed as a function to ensure that every HttpClient gets its own RetryConfig\n * instance.\n */\nfunction defaultRetryConfig() {\n  return {\n    maxRetries: 4,\n    statusCodes: [503],\n    ioErrorCodes: ['ECONNRESET', 'ETIMEDOUT'],\n    backOffFactor: 0.5,\n    maxDelayInMillis: 60 * 1000\n  };\n}\nexports.defaultRetryConfig = defaultRetryConfig;\n/**\n * Ensures that the given RetryConfig object is valid.\n *\n * @param retry - The configuration to be validated.\n */\nfunction validateRetryConfig(retry) {\n  if (!validator.isNumber(retry.maxRetries) || retry.maxRetries < 0) {\n    throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'maxRetries must be a non-negative integer');\n  }\n  if (typeof retry.backOffFactor !== 'undefined') {\n    if (!validator.isNumber(retry.backOffFactor) || retry.backOffFactor < 0) {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'backOffFactor must be a non-negative number');\n    }\n  }\n  if (!validator.isNumber(retry.maxDelayInMillis) || retry.maxDelayInMillis < 0) {\n    throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'maxDelayInMillis must be a non-negative integer');\n  }\n  if (typeof retry.statusCodes !== 'undefined' && !validator.isArray(retry.statusCodes)) {\n    throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'statusCodes must be an array');\n  }\n  if (typeof retry.ioErrorCodes !== 'undefined' && !validator.isArray(retry.ioErrorCodes)) {\n    throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'ioErrorCodes must be an array');\n  }\n}\nclass HttpClient {\n  constructor() {\n    let retry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultRetryConfig();\n    this.retry = retry;\n    if (this.retry) {\n      validateRetryConfig(this.retry);\n    }\n  }\n  /**\n   * Sends an HTTP request to a remote server. If the server responds with a successful response (2xx), the returned\n   * promise resolves with an HttpResponse. If the server responds with an error (3xx, 4xx, 5xx), the promise rejects\n   * with an HttpError. In case of all other errors, the promise rejects with a FirebaseAppError. If a request fails\n   * due to a low-level network error, transparently retries the request once before rejecting the promise.\n   *\n   * If the request data is specified as an object, it will be serialized into a JSON string. The application/json\n   * content-type header will also be automatically set in this case. For all other payload types, the content-type\n   * header should be explicitly set by the caller. To send a JSON leaf value (e.g. \"foo\", 5), parse it into JSON,\n   * and pass as a string or a Buffer along with the appropriate content-type header.\n   *\n   * @param config - HTTP request to be sent.\n   * @returns A promise that resolves with the response details.\n   */\n  send(config) {\n    return this.sendWithRetry(config);\n  }\n  /**\n   * Sends an HTTP request. In the event of an error, retries the HTTP request according to the\n   * RetryConfig set on the HttpClient.\n   *\n   * @param config - HTTP request to be sent.\n   * @param retryAttempts - Number of retries performed up to now.\n   * @returns A promise that resolves with the response details.\n   */\n  sendWithRetry(config) {\n    let retryAttempts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return AsyncHttpCall.invoke(config).then(resp => {\n      return this.createHttpResponse(resp);\n    }).catch(err => {\n      const [delayMillis, canRetry] = this.getRetryDelayMillis(retryAttempts, err);\n      if (canRetry && this.retry && delayMillis <= this.retry.maxDelayInMillis) {\n        return this.waitForRetry(delayMillis).then(() => {\n          return this.sendWithRetry(config, retryAttempts + 1);\n        });\n      }\n      if (err.response) {\n        throw new HttpError(this.createHttpResponse(err.response));\n      }\n      if (err.code === 'ETIMEDOUT') {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NETWORK_TIMEOUT, `Error while making request: ${err.message}.`);\n      }\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NETWORK_ERROR, `Error while making request: ${err.message}. Error code: ${err.code}`);\n    });\n  }\n  createHttpResponse(resp) {\n    if (resp.multipart) {\n      return new MultipartHttpResponse(resp);\n    }\n    return new DefaultHttpResponse(resp);\n  }\n  waitForRetry(delayMillis) {\n    if (delayMillis > 0) {\n      return new Promise(resolve => {\n        setTimeout(resolve, delayMillis);\n      });\n    }\n    return Promise.resolve();\n  }\n  /**\n   * Checks if a failed request is eligible for a retry, and if so returns the duration to wait before initiating\n   * the retry.\n   *\n   * @param retryAttempts - Number of retries completed up to now.\n   * @param err - The last encountered error.\n   * @returns A 2-tuple where the 1st element is the duration to wait before another retry, and the\n   *     2nd element is a boolean indicating whether the request is eligible for a retry or not.\n   */\n  getRetryDelayMillis(retryAttempts, err) {\n    if (!this.isRetryEligible(retryAttempts, err)) {\n      return [0, false];\n    }\n    const response = err.response;\n    if (response && response.headers['retry-after']) {\n      const delayMillis = this.parseRetryAfterIntoMillis(response.headers['retry-after']);\n      if (delayMillis > 0) {\n        return [delayMillis, true];\n      }\n    }\n    return [this.backOffDelayMillis(retryAttempts), true];\n  }\n  isRetryEligible(retryAttempts, err) {\n    if (!this.retry) {\n      return false;\n    }\n    if (retryAttempts >= this.retry.maxRetries) {\n      return false;\n    }\n    if (err.response) {\n      const statusCodes = this.retry.statusCodes || [];\n      return statusCodes.indexOf(err.response.status) !== -1;\n    }\n    if (err.code) {\n      const retryCodes = this.retry.ioErrorCodes || [];\n      return retryCodes.indexOf(err.code) !== -1;\n    }\n    return false;\n  }\n  /**\n   * Parses the Retry-After HTTP header as a milliseconds value. Return value is negative if the Retry-After header\n   * contains an expired timestamp or otherwise malformed.\n   */\n  parseRetryAfterIntoMillis(retryAfter) {\n    const delaySeconds = parseInt(retryAfter, 10);\n    if (!isNaN(delaySeconds)) {\n      return delaySeconds * 1000;\n    }\n    const date = new Date(retryAfter);\n    if (!isNaN(date.getTime())) {\n      return date.getTime() - Date.now();\n    }\n    return -1;\n  }\n  backOffDelayMillis(retryAttempts) {\n    if (retryAttempts === 0) {\n      return 0;\n    }\n    if (!this.retry) {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'Expected this.retry to exist.');\n    }\n    const backOffFactor = this.retry.backOffFactor || 0;\n    const delayInSeconds = 2 ** retryAttempts * backOffFactor;\n    return Math.min(delayInSeconds * 1000, this.retry.maxDelayInMillis);\n  }\n}\nexports.HttpClient = HttpClient;\n/**\n * Parses a full HTTP response message containing both a header and a body.\n *\n * @param response - The HTTP response to be parsed.\n * @param config - The request configuration that resulted in the HTTP response.\n * @returns An object containing the parsed HTTP status, headers and the body.\n */\nfunction parseHttpResponse(response, config) {\n  const responseText = validator.isBuffer(response) ? response.toString('utf-8') : response;\n  const endOfHeaderPos = responseText.indexOf('\\r\\n\\r\\n');\n  const headerLines = responseText.substring(0, endOfHeaderPos).split('\\r\\n');\n  const statusLine = headerLines[0];\n  const status = statusLine.trim().split(/\\s/)[1];\n  const headers = {};\n  headerLines.slice(1).forEach(line => {\n    const colonPos = line.indexOf(':');\n    const name = line.substring(0, colonPos).trim().toLowerCase();\n    const value = line.substring(colonPos + 1).trim();\n    headers[name] = value;\n  });\n  let data = responseText.substring(endOfHeaderPos + 4);\n  if (data.endsWith('\\n')) {\n    data = data.slice(0, -1);\n  }\n  if (data.endsWith('\\r')) {\n    data = data.slice(0, -1);\n  }\n  const lowLevelResponse = {\n    status: parseInt(status, 10),\n    headers,\n    data,\n    config,\n    request: null\n  };\n  if (!validator.isNumber(lowLevelResponse.status)) {\n    throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'Malformed HTTP status line.');\n  }\n  return new DefaultHttpResponse(lowLevelResponse);\n}\nexports.parseHttpResponse = parseHttpResponse;\n/**\n * A helper class for sending HTTP requests over the wire. This is a wrapper around the standard\n * http and https packages of Node.js, providing content processing, timeouts and error handling.\n * It also wraps the callback API of the Node.js standard library in a more flexible Promise API.\n */\nclass AsyncHttpCall {\n  constructor(config) {\n    try {\n      this.config = new HttpRequestConfigImpl(config);\n      this.options = this.config.buildRequestOptions();\n      this.entity = this.config.buildEntity(this.options.headers);\n      this.promise = new Promise((resolve, reject) => {\n        this.resolve = resolve;\n        this.reject = reject;\n        this.execute();\n      });\n    } catch (err) {\n      this.promise = Promise.reject(this.enhanceError(err, null));\n    }\n  }\n  /**\n   * Sends an HTTP request based on the provided configuration.\n   */\n  static invoke(config) {\n    return new AsyncHttpCall(config).promise;\n  }\n  execute() {\n    const transport = this.options.protocol === 'https:' ? https : http;\n    const req = transport.request(this.options, res => {\n      this.handleResponse(res, req);\n    });\n    // Handle errors\n    req.on('error', err => {\n      if (req.aborted) {\n        return;\n      }\n      this.enhanceAndReject(err, null, req);\n    });\n    const timeout = this.config.timeout;\n    const timeoutCallback = () => {\n      req.abort();\n      this.rejectWithError(`timeout of ${timeout}ms exceeded`, 'ETIMEDOUT', req);\n    };\n    if (timeout) {\n      // Listen to timeouts and throw an error.\n      req.setTimeout(timeout, timeoutCallback);\n      req.on('socket', socket => {\n        socket.setMaxListeners(socket.getMaxListeners() + 1);\n        socket.setTimeout(timeout, timeoutCallback);\n        socket.on('end', () => {\n          socket.setTimeout(0);\n          socket.setMaxListeners(Math.max(socket.getMaxListeners() - 1, 0));\n        });\n      });\n    }\n    // Send the request\n    req.end(this.entity);\n  }\n  handleResponse(res, req) {\n    if (req.aborted) {\n      return;\n    }\n    if (!res.statusCode) {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'Expected a statusCode on the response from a ClientRequest');\n    }\n    const response = {\n      status: res.statusCode,\n      headers: res.headers,\n      request: req,\n      data: undefined,\n      config: this.config\n    };\n    const boundary = this.getMultipartBoundary(res.headers);\n    const respStream = this.uncompressResponse(res);\n    if (boundary) {\n      this.handleMultipartResponse(response, respStream, boundary);\n    } else {\n      this.handleRegularResponse(response, respStream);\n    }\n  }\n  /**\n   * Extracts multipart boundary from the HTTP header. The content-type header of a multipart\n   * response has the form 'multipart/subtype; boundary=string'.\n   *\n   * If the content-type header does not exist, or does not start with\n   * 'multipart/', then null will be returned.\n   */\n  getMultipartBoundary(headers) {\n    const contentType = headers['content-type'];\n    if (!contentType || !contentType.startsWith('multipart/')) {\n      return null;\n    }\n    const segments = contentType.split(';');\n    const emptyObject = {};\n    const headerParams = segments.slice(1).map(segment => segment.trim().split('=')).reduce((curr, params) => {\n      // Parse key=value pairs in the content-type header into properties of an object.\n      if (params.length === 2) {\n        const keyValuePair = {};\n        keyValuePair[params[0]] = params[1];\n        return Object.assign(curr, keyValuePair);\n      }\n      return curr;\n    }, emptyObject);\n    return headerParams.boundary;\n  }\n  uncompressResponse(res) {\n    // Uncompress the response body transparently if required.\n    let respStream = res;\n    const encodings = ['gzip', 'compress', 'deflate'];\n    if (res.headers['content-encoding'] && encodings.indexOf(res.headers['content-encoding']) !== -1) {\n      // Add the unzipper to the body stream processing pipeline.\n      const zlib = require('zlib'); // eslint-disable-line @typescript-eslint/no-var-requires\n      respStream = respStream.pipe(zlib.createUnzip());\n      // Remove the content-encoding in order to not confuse downstream operations.\n      delete res.headers['content-encoding'];\n    }\n    return respStream;\n  }\n  handleMultipartResponse(response, respStream, boundary) {\n    const busboy = require('@fastify/busboy'); // eslint-disable-line @typescript-eslint/no-var-requires\n    const multipartParser = new busboy.Dicer({\n      boundary\n    });\n    const responseBuffer = [];\n    multipartParser.on('part', part => {\n      const tempBuffers = [];\n      part.on('data', partData => {\n        tempBuffers.push(partData);\n      });\n      part.on('end', () => {\n        responseBuffer.push(Buffer.concat(tempBuffers));\n      });\n    });\n    multipartParser.on('finish', () => {\n      response.data = undefined;\n      response.multipart = responseBuffer;\n      this.finalizeResponse(response);\n    });\n    respStream.pipe(multipartParser);\n  }\n  handleRegularResponse(response, respStream) {\n    const responseBuffer = [];\n    respStream.on('data', chunk => {\n      responseBuffer.push(chunk);\n    });\n    respStream.on('error', err => {\n      const req = response.request;\n      if (req && req.aborted) {\n        return;\n      }\n      this.enhanceAndReject(err, null, req);\n    });\n    respStream.on('end', () => {\n      response.data = Buffer.concat(responseBuffer).toString();\n      this.finalizeResponse(response);\n    });\n  }\n  /**\n   * Finalizes the current HTTP call in-flight by either resolving or rejecting the associated\n   * promise. In the event of an error, adds additional useful information to the returned error.\n   */\n  finalizeResponse(response) {\n    if (response.status >= 200 && response.status < 300) {\n      this.resolve(response);\n    } else {\n      this.rejectWithError('Request failed with status code ' + response.status, null, response.request, response);\n    }\n  }\n  /**\n   * Creates a new error from the given message, and enhances it with other information available.\n   * Then the promise associated with this HTTP call is rejected with the resulting error.\n   */\n  rejectWithError(message, code, request, response) {\n    const error = new Error(message);\n    this.enhanceAndReject(error, code, request, response);\n  }\n  enhanceAndReject(error, code, request, response) {\n    this.reject(this.enhanceError(error, code, request, response));\n  }\n  /**\n   * Enhances the given error by adding more information to it. Specifically, the HttpRequestConfig,\n   * the underlying request and response will be attached to the error.\n   */\n  enhanceError(error, code, request, response) {\n    error.config = this.config;\n    if (code) {\n      error.code = code;\n    }\n    error.request = request;\n    error.response = response;\n    return error;\n  }\n}\n/**\n * An adapter class for extracting options and entity data from an HttpRequestConfig.\n */\nclass HttpRequestConfigImpl {\n  constructor(config) {\n    this.config = config;\n  }\n  get method() {\n    return this.config.method;\n  }\n  get url() {\n    return this.config.url;\n  }\n  get headers() {\n    return this.config.headers;\n  }\n  get data() {\n    return this.config.data;\n  }\n  get timeout() {\n    return this.config.timeout;\n  }\n  get httpAgent() {\n    return this.config.httpAgent;\n  }\n  buildRequestOptions() {\n    const parsed = this.buildUrl();\n    const protocol = parsed.protocol;\n    let port = parsed.port;\n    if (!port) {\n      const isHttps = protocol === 'https:';\n      port = isHttps ? '443' : '80';\n    }\n    return {\n      protocol,\n      hostname: parsed.hostname,\n      port,\n      path: parsed.path,\n      method: this.method,\n      agent: this.httpAgent,\n      headers: Object.assign({}, this.headers)\n    };\n  }\n  buildEntity(headers) {\n    let data;\n    if (!this.hasEntity() || !this.isEntityEnclosingRequest()) {\n      return data;\n    }\n    if (validator.isBuffer(this.data)) {\n      data = this.data;\n    } else if (validator.isObject(this.data)) {\n      data = Buffer.from(JSON.stringify(this.data), 'utf-8');\n      if (typeof headers['content-type'] === 'undefined') {\n        headers['content-type'] = 'application/json;charset=utf-8';\n      }\n    } else if (validator.isString(this.data)) {\n      data = Buffer.from(this.data, 'utf-8');\n    } else {\n      throw new Error('Request data must be a string, a Buffer or a json serializable object');\n    }\n    // Add Content-Length header if data exists.\n    headers['Content-Length'] = data.length.toString();\n    return data;\n  }\n  buildUrl() {\n    const fullUrl = this.urlWithProtocol();\n    if (!this.hasEntity() || this.isEntityEnclosingRequest()) {\n      return url.parse(fullUrl);\n    }\n    if (!validator.isObject(this.data)) {\n      throw new Error(`${this.method} requests cannot have a body`);\n    }\n    // Parse URL and append data to query string.\n    const parsedUrl = new url.URL(fullUrl);\n    const dataObj = this.data;\n    for (const key in dataObj) {\n      if (Object.prototype.hasOwnProperty.call(dataObj, key)) {\n        parsedUrl.searchParams.append(key, dataObj[key]);\n      }\n    }\n    return url.parse(parsedUrl.toString());\n  }\n  urlWithProtocol() {\n    const fullUrl = this.url;\n    if (fullUrl.startsWith('http://') || fullUrl.startsWith('https://')) {\n      return fullUrl;\n    }\n    return `https://${fullUrl}`;\n  }\n  hasEntity() {\n    return !!this.data;\n  }\n  isEntityEnclosingRequest() {\n    // GET and HEAD requests do not support entity (body) in request.\n    return this.method !== 'GET' && this.method !== 'HEAD';\n  }\n}\nclass AuthorizedHttpClient extends HttpClient {\n  constructor(app) {\n    super();\n    this.app = app;\n  }\n  send(request) {\n    return this.getToken().then(token => {\n      const requestCopy = Object.assign({}, request);\n      requestCopy.headers = Object.assign({}, request.headers);\n      const authHeader = 'Authorization';\n      requestCopy.headers[authHeader] = `Bearer ${token}`;\n      if (!requestCopy.httpAgent && this.app.options.httpAgent) {\n        requestCopy.httpAgent = this.app.options.httpAgent;\n      }\n      return super.send(requestCopy);\n    });\n  }\n  getToken() {\n    return this.app.INTERNAL.getToken().then(accessTokenObj => {\n      return accessTokenObj.accessToken;\n    });\n  }\n}\nexports.AuthorizedHttpClient = AuthorizedHttpClient;\n/**\n * Class that defines all the settings for the backend API endpoint.\n *\n * @param endpoint - The Firebase Auth backend endpoint.\n * @param httpMethod - The http method for that endpoint.\n * @constructor\n */\nclass ApiSettings {\n  constructor(endpoint) {\n    let httpMethod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'POST';\n    this.endpoint = endpoint;\n    this.httpMethod = httpMethod;\n    this.setRequestValidator(null).setResponseValidator(null);\n  }\n  /** @returns The backend API endpoint. */\n  getEndpoint() {\n    return this.endpoint;\n  }\n  /** @returns The request HTTP method. */\n  getHttpMethod() {\n    return this.httpMethod;\n  }\n  /**\n   * @param requestValidator - The request validator.\n   * @returns The current API settings instance.\n   */\n  setRequestValidator(requestValidator) {\n    const nullFunction = () => undefined;\n    this.requestValidator = requestValidator || nullFunction;\n    return this;\n  }\n  /** @returns The request validator. */\n  getRequestValidator() {\n    return this.requestValidator;\n  }\n  /**\n   * @param responseValidator - The response validator.\n   * @returns The current API settings instance.\n   */\n  setResponseValidator(responseValidator) {\n    const nullFunction = () => undefined;\n    this.responseValidator = responseValidator || nullFunction;\n    return this;\n  }\n  /** @returns The response validator. */\n  getResponseValidator() {\n    return this.responseValidator;\n  }\n}\nexports.ApiSettings = ApiSettings;\n/**\n * Class used for polling an endpoint with exponential backoff.\n *\n * Example usage:\n * ```\n * const poller = new ExponentialBackoffPoller();\n * poller\n *     .poll(() => {\n *       return myRequestToPoll()\n *           .then((responseData: any) => {\n *             if (!isValid(responseData)) {\n *               // Continue polling.\n *               return null;\n *             }\n *\n *             // Polling complete. Resolve promise with final response data.\n *             return responseData;\n *           });\n *     })\n *     .then((responseData: any) => {\n *       console.log(`Final response: ${responseData}`);\n *     });\n * ```\n */\nclass ExponentialBackoffPoller extends events_1.EventEmitter {\n  constructor() {\n    let initialPollingDelayMillis = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n    let maxPollingDelayMillis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10000;\n    let masterTimeoutMillis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n    super();\n    this.initialPollingDelayMillis = initialPollingDelayMillis;\n    this.maxPollingDelayMillis = maxPollingDelayMillis;\n    this.masterTimeoutMillis = masterTimeoutMillis;\n    this.numTries = 0;\n    this.completed = false;\n  }\n  /**\n   * Poll the provided callback with exponential backoff.\n   *\n   * @param callback - The callback to be called for each poll. If the\n   *     callback resolves to a falsey value, polling will continue. Otherwise, the truthy\n   *     resolution will be used to resolve the promise returned by this method.\n   * @returns A Promise which resolves to the truthy value returned by the provided\n   *     callback when polling is complete.\n   */\n  poll(callback) {\n    if (this.pollCallback) {\n      throw new Error('poll() can only be called once per instance of ExponentialBackoffPoller');\n    }\n    this.pollCallback = callback;\n    this.on('poll', this.repoll);\n    this.masterTimer = setTimeout(() => {\n      if (this.completed) {\n        return;\n      }\n      this.markCompleted();\n      this.reject(new Error('ExponentialBackoffPoller deadline exceeded - Master timeout reached'));\n    }, this.masterTimeoutMillis);\n    return new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n      this.repoll();\n    });\n  }\n  repoll() {\n    this.pollCallback().then(result => {\n      if (this.completed) {\n        return;\n      }\n      if (!result) {\n        this.repollTimer = setTimeout(() => this.emit('poll'), this.getPollingDelayMillis());\n        this.numTries++;\n        return;\n      }\n      this.markCompleted();\n      this.resolve(result);\n    }).catch(err => {\n      if (this.completed) {\n        return;\n      }\n      this.markCompleted();\n      this.reject(err);\n    });\n  }\n  getPollingDelayMillis() {\n    const increasedPollingDelay = Math.pow(2, this.numTries) * this.initialPollingDelayMillis;\n    return Math.min(increasedPollingDelay, this.maxPollingDelayMillis);\n  }\n  markCompleted() {\n    this.completed = true;\n    if (this.masterTimer) {\n      clearTimeout(this.masterTimer);\n    }\n    if (this.repollTimer) {\n      clearTimeout(this.repollTimer);\n    }\n  }\n}\nexports.ExponentialBackoffPoller = ExponentialBackoffPoller;","map":{"version":3,"names":["Object","defineProperty","exports","value","ExponentialBackoffPoller","ApiSettings","AuthorizedHttpClient","parseHttpResponse","HttpClient","defaultRetryConfig","HttpError","error_1","require","validator","http","https","url","events_1","DefaultHttpResponse","constructor","resp","status","headers","text","data","FirebaseAppError","AppErrorCodes","INTERNAL_ERROR","parsedData","JSON","parse","err","undefined","parseError","request","config","method","isJson","UNABLE_TO_PARSE_RESPONSE","toString","MultipartHttpResponse","multipart","Error","response","setPrototypeOf","prototype","maxRetries","statusCodes","ioErrorCodes","backOffFactor","maxDelayInMillis","validateRetryConfig","retry","isNumber","INVALID_ARGUMENT","isArray","send","sendWithRetry","retryAttempts","AsyncHttpCall","invoke","then","createHttpResponse","catch","delayMillis","canRetry","getRetryDelayMillis","waitForRetry","code","NETWORK_TIMEOUT","message","NETWORK_ERROR","Promise","resolve","setTimeout","isRetryEligible","parseRetryAfterIntoMillis","backOffDelayMillis","indexOf","retryCodes","retryAfter","delaySeconds","parseInt","isNaN","date","Date","getTime","now","delayInSeconds","Math","min","responseText","isBuffer","endOfHeaderPos","headerLines","substring","split","statusLine","trim","slice","forEach","line","colonPos","name","toLowerCase","endsWith","lowLevelResponse","HttpRequestConfigImpl","options","buildRequestOptions","entity","buildEntity","promise","reject","execute","enhanceError","transport","protocol","req","res","handleResponse","on","aborted","enhanceAndReject","timeout","timeoutCallback","abort","rejectWithError","socket","setMaxListeners","getMaxListeners","max","end","statusCode","boundary","getMultipartBoundary","respStream","uncompressResponse","handleMultipartResponse","handleRegularResponse","contentType","startsWith","segments","emptyObject","headerParams","map","segment","reduce","curr","params","length","keyValuePair","assign","encodings","zlib","pipe","createUnzip","busboy","multipartParser","Dicer","responseBuffer","part","tempBuffers","partData","push","Buffer","concat","finalizeResponse","chunk","error","httpAgent","parsed","buildUrl","port","isHttps","hostname","path","agent","hasEntity","isEntityEnclosingRequest","isObject","from","stringify","isString","fullUrl","urlWithProtocol","parsedUrl","URL","dataObj","key","hasOwnProperty","call","searchParams","append","app","getToken","token","requestCopy","authHeader","INTERNAL","accessTokenObj","accessToken","endpoint","httpMethod","setRequestValidator","setResponseValidator","getEndpoint","getHttpMethod","requestValidator","nullFunction","getRequestValidator","responseValidator","getResponseValidator","EventEmitter","initialPollingDelayMillis","maxPollingDelayMillis","masterTimeoutMillis","numTries","completed","poll","callback","pollCallback","repoll","masterTimer","markCompleted","result","repollTimer","emit","getPollingDelayMillis","increasedPollingDelay","pow","clearTimeout"],"sources":["/home/yusuf/coding/portfolio/node_modules/firebase-admin/lib/utils/api-request.js"],"sourcesContent":["/*! firebase-admin v11.5.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExponentialBackoffPoller = exports.ApiSettings = exports.AuthorizedHttpClient = exports.parseHttpResponse = exports.HttpClient = exports.defaultRetryConfig = exports.HttpError = void 0;\nconst error_1 = require(\"./error\");\nconst validator = require(\"./validator\");\nconst http = require(\"http\");\nconst https = require(\"https\");\nconst url = require(\"url\");\nconst events_1 = require(\"events\");\nclass DefaultHttpResponse {\n    /**\n     * Constructs a new HttpResponse from the given LowLevelResponse.\n     */\n    constructor(resp) {\n        this.status = resp.status;\n        this.headers = resp.headers;\n        this.text = resp.data;\n        try {\n            if (!resp.data) {\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'HTTP response missing data.');\n            }\n            this.parsedData = JSON.parse(resp.data);\n        }\n        catch (err) {\n            this.parsedData = undefined;\n            this.parseError = err;\n        }\n        this.request = `${resp.config.method} ${resp.config.url}`;\n    }\n    get data() {\n        if (this.isJson()) {\n            return this.parsedData;\n        }\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.UNABLE_TO_PARSE_RESPONSE, `Error while parsing response data: \"${this.parseError.toString()}\". Raw server ` +\n            `response: \"${this.text}\". Status code: \"${this.status}\". Outgoing ` +\n            `request: \"${this.request}.\"`);\n    }\n    isJson() {\n        return typeof this.parsedData !== 'undefined';\n    }\n}\n/**\n * Represents a multipart HTTP response. Parts that constitute the response body can be accessed\n * via the multipart getter. Getters for text and data throw errors.\n */\nclass MultipartHttpResponse {\n    constructor(resp) {\n        this.status = resp.status;\n        this.headers = resp.headers;\n        this.multipart = resp.multipart;\n    }\n    get text() {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.UNABLE_TO_PARSE_RESPONSE, 'Unable to parse multipart payload as text');\n    }\n    get data() {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.UNABLE_TO_PARSE_RESPONSE, 'Unable to parse multipart payload as JSON');\n    }\n    isJson() {\n        return false;\n    }\n}\nclass HttpError extends Error {\n    constructor(response) {\n        super(`Server responded with status ${response.status}.`);\n        this.response = response;\n        // Set the prototype so that instanceof checks will work correctly.\n        // See: https://github.com/Microsoft/TypeScript/issues/13965\n        Object.setPrototypeOf(this, HttpError.prototype);\n    }\n}\nexports.HttpError = HttpError;\n/**\n * Default retry configuration for HTTP requests. Retries up to 4 times on connection reset and timeout errors\n * as well as HTTP 503 errors. Exposed as a function to ensure that every HttpClient gets its own RetryConfig\n * instance.\n */\nfunction defaultRetryConfig() {\n    return {\n        maxRetries: 4,\n        statusCodes: [503],\n        ioErrorCodes: ['ECONNRESET', 'ETIMEDOUT'],\n        backOffFactor: 0.5,\n        maxDelayInMillis: 60 * 1000,\n    };\n}\nexports.defaultRetryConfig = defaultRetryConfig;\n/**\n * Ensures that the given RetryConfig object is valid.\n *\n * @param retry - The configuration to be validated.\n */\nfunction validateRetryConfig(retry) {\n    if (!validator.isNumber(retry.maxRetries) || retry.maxRetries < 0) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'maxRetries must be a non-negative integer');\n    }\n    if (typeof retry.backOffFactor !== 'undefined') {\n        if (!validator.isNumber(retry.backOffFactor) || retry.backOffFactor < 0) {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'backOffFactor must be a non-negative number');\n        }\n    }\n    if (!validator.isNumber(retry.maxDelayInMillis) || retry.maxDelayInMillis < 0) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'maxDelayInMillis must be a non-negative integer');\n    }\n    if (typeof retry.statusCodes !== 'undefined' && !validator.isArray(retry.statusCodes)) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'statusCodes must be an array');\n    }\n    if (typeof retry.ioErrorCodes !== 'undefined' && !validator.isArray(retry.ioErrorCodes)) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'ioErrorCodes must be an array');\n    }\n}\nclass HttpClient {\n    constructor(retry = defaultRetryConfig()) {\n        this.retry = retry;\n        if (this.retry) {\n            validateRetryConfig(this.retry);\n        }\n    }\n    /**\n     * Sends an HTTP request to a remote server. If the server responds with a successful response (2xx), the returned\n     * promise resolves with an HttpResponse. If the server responds with an error (3xx, 4xx, 5xx), the promise rejects\n     * with an HttpError. In case of all other errors, the promise rejects with a FirebaseAppError. If a request fails\n     * due to a low-level network error, transparently retries the request once before rejecting the promise.\n     *\n     * If the request data is specified as an object, it will be serialized into a JSON string. The application/json\n     * content-type header will also be automatically set in this case. For all other payload types, the content-type\n     * header should be explicitly set by the caller. To send a JSON leaf value (e.g. \"foo\", 5), parse it into JSON,\n     * and pass as a string or a Buffer along with the appropriate content-type header.\n     *\n     * @param config - HTTP request to be sent.\n     * @returns A promise that resolves with the response details.\n     */\n    send(config) {\n        return this.sendWithRetry(config);\n    }\n    /**\n     * Sends an HTTP request. In the event of an error, retries the HTTP request according to the\n     * RetryConfig set on the HttpClient.\n     *\n     * @param config - HTTP request to be sent.\n     * @param retryAttempts - Number of retries performed up to now.\n     * @returns A promise that resolves with the response details.\n     */\n    sendWithRetry(config, retryAttempts = 0) {\n        return AsyncHttpCall.invoke(config)\n            .then((resp) => {\n            return this.createHttpResponse(resp);\n        })\n            .catch((err) => {\n            const [delayMillis, canRetry] = this.getRetryDelayMillis(retryAttempts, err);\n            if (canRetry && this.retry && delayMillis <= this.retry.maxDelayInMillis) {\n                return this.waitForRetry(delayMillis).then(() => {\n                    return this.sendWithRetry(config, retryAttempts + 1);\n                });\n            }\n            if (err.response) {\n                throw new HttpError(this.createHttpResponse(err.response));\n            }\n            if (err.code === 'ETIMEDOUT') {\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NETWORK_TIMEOUT, `Error while making request: ${err.message}.`);\n            }\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NETWORK_ERROR, `Error while making request: ${err.message}. Error code: ${err.code}`);\n        });\n    }\n    createHttpResponse(resp) {\n        if (resp.multipart) {\n            return new MultipartHttpResponse(resp);\n        }\n        return new DefaultHttpResponse(resp);\n    }\n    waitForRetry(delayMillis) {\n        if (delayMillis > 0) {\n            return new Promise((resolve) => {\n                setTimeout(resolve, delayMillis);\n            });\n        }\n        return Promise.resolve();\n    }\n    /**\n     * Checks if a failed request is eligible for a retry, and if so returns the duration to wait before initiating\n     * the retry.\n     *\n     * @param retryAttempts - Number of retries completed up to now.\n     * @param err - The last encountered error.\n     * @returns A 2-tuple where the 1st element is the duration to wait before another retry, and the\n     *     2nd element is a boolean indicating whether the request is eligible for a retry or not.\n     */\n    getRetryDelayMillis(retryAttempts, err) {\n        if (!this.isRetryEligible(retryAttempts, err)) {\n            return [0, false];\n        }\n        const response = err.response;\n        if (response && response.headers['retry-after']) {\n            const delayMillis = this.parseRetryAfterIntoMillis(response.headers['retry-after']);\n            if (delayMillis > 0) {\n                return [delayMillis, true];\n            }\n        }\n        return [this.backOffDelayMillis(retryAttempts), true];\n    }\n    isRetryEligible(retryAttempts, err) {\n        if (!this.retry) {\n            return false;\n        }\n        if (retryAttempts >= this.retry.maxRetries) {\n            return false;\n        }\n        if (err.response) {\n            const statusCodes = this.retry.statusCodes || [];\n            return statusCodes.indexOf(err.response.status) !== -1;\n        }\n        if (err.code) {\n            const retryCodes = this.retry.ioErrorCodes || [];\n            return retryCodes.indexOf(err.code) !== -1;\n        }\n        return false;\n    }\n    /**\n     * Parses the Retry-After HTTP header as a milliseconds value. Return value is negative if the Retry-After header\n     * contains an expired timestamp or otherwise malformed.\n     */\n    parseRetryAfterIntoMillis(retryAfter) {\n        const delaySeconds = parseInt(retryAfter, 10);\n        if (!isNaN(delaySeconds)) {\n            return delaySeconds * 1000;\n        }\n        const date = new Date(retryAfter);\n        if (!isNaN(date.getTime())) {\n            return date.getTime() - Date.now();\n        }\n        return -1;\n    }\n    backOffDelayMillis(retryAttempts) {\n        if (retryAttempts === 0) {\n            return 0;\n        }\n        if (!this.retry) {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'Expected this.retry to exist.');\n        }\n        const backOffFactor = this.retry.backOffFactor || 0;\n        const delayInSeconds = (2 ** retryAttempts) * backOffFactor;\n        return Math.min(delayInSeconds * 1000, this.retry.maxDelayInMillis);\n    }\n}\nexports.HttpClient = HttpClient;\n/**\n * Parses a full HTTP response message containing both a header and a body.\n *\n * @param response - The HTTP response to be parsed.\n * @param config - The request configuration that resulted in the HTTP response.\n * @returns An object containing the parsed HTTP status, headers and the body.\n */\nfunction parseHttpResponse(response, config) {\n    const responseText = validator.isBuffer(response) ?\n        response.toString('utf-8') : response;\n    const endOfHeaderPos = responseText.indexOf('\\r\\n\\r\\n');\n    const headerLines = responseText.substring(0, endOfHeaderPos).split('\\r\\n');\n    const statusLine = headerLines[0];\n    const status = statusLine.trim().split(/\\s/)[1];\n    const headers = {};\n    headerLines.slice(1).forEach((line) => {\n        const colonPos = line.indexOf(':');\n        const name = line.substring(0, colonPos).trim().toLowerCase();\n        const value = line.substring(colonPos + 1).trim();\n        headers[name] = value;\n    });\n    let data = responseText.substring(endOfHeaderPos + 4);\n    if (data.endsWith('\\n')) {\n        data = data.slice(0, -1);\n    }\n    if (data.endsWith('\\r')) {\n        data = data.slice(0, -1);\n    }\n    const lowLevelResponse = {\n        status: parseInt(status, 10),\n        headers,\n        data,\n        config,\n        request: null,\n    };\n    if (!validator.isNumber(lowLevelResponse.status)) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'Malformed HTTP status line.');\n    }\n    return new DefaultHttpResponse(lowLevelResponse);\n}\nexports.parseHttpResponse = parseHttpResponse;\n/**\n * A helper class for sending HTTP requests over the wire. This is a wrapper around the standard\n * http and https packages of Node.js, providing content processing, timeouts and error handling.\n * It also wraps the callback API of the Node.js standard library in a more flexible Promise API.\n */\nclass AsyncHttpCall {\n    constructor(config) {\n        try {\n            this.config = new HttpRequestConfigImpl(config);\n            this.options = this.config.buildRequestOptions();\n            this.entity = this.config.buildEntity(this.options.headers);\n            this.promise = new Promise((resolve, reject) => {\n                this.resolve = resolve;\n                this.reject = reject;\n                this.execute();\n            });\n        }\n        catch (err) {\n            this.promise = Promise.reject(this.enhanceError(err, null));\n        }\n    }\n    /**\n     * Sends an HTTP request based on the provided configuration.\n     */\n    static invoke(config) {\n        return new AsyncHttpCall(config).promise;\n    }\n    execute() {\n        const transport = this.options.protocol === 'https:' ? https : http;\n        const req = transport.request(this.options, (res) => {\n            this.handleResponse(res, req);\n        });\n        // Handle errors\n        req.on('error', (err) => {\n            if (req.aborted) {\n                return;\n            }\n            this.enhanceAndReject(err, null, req);\n        });\n        const timeout = this.config.timeout;\n        const timeoutCallback = () => {\n            req.abort();\n            this.rejectWithError(`timeout of ${timeout}ms exceeded`, 'ETIMEDOUT', req);\n        };\n        if (timeout) {\n            // Listen to timeouts and throw an error.\n            req.setTimeout(timeout, timeoutCallback);\n            req.on('socket', (socket) => {\n                socket.setMaxListeners(socket.getMaxListeners() + 1);\n                socket.setTimeout(timeout, timeoutCallback);\n                socket.on('end', () => {\n                    socket.setTimeout(0);\n                    socket.setMaxListeners(Math.max(socket.getMaxListeners() - 1, 0));\n                });\n            });\n        }\n        // Send the request\n        req.end(this.entity);\n    }\n    handleResponse(res, req) {\n        if (req.aborted) {\n            return;\n        }\n        if (!res.statusCode) {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'Expected a statusCode on the response from a ClientRequest');\n        }\n        const response = {\n            status: res.statusCode,\n            headers: res.headers,\n            request: req,\n            data: undefined,\n            config: this.config,\n        };\n        const boundary = this.getMultipartBoundary(res.headers);\n        const respStream = this.uncompressResponse(res);\n        if (boundary) {\n            this.handleMultipartResponse(response, respStream, boundary);\n        }\n        else {\n            this.handleRegularResponse(response, respStream);\n        }\n    }\n    /**\n     * Extracts multipart boundary from the HTTP header. The content-type header of a multipart\n     * response has the form 'multipart/subtype; boundary=string'.\n     *\n     * If the content-type header does not exist, or does not start with\n     * 'multipart/', then null will be returned.\n     */\n    getMultipartBoundary(headers) {\n        const contentType = headers['content-type'];\n        if (!contentType || !contentType.startsWith('multipart/')) {\n            return null;\n        }\n        const segments = contentType.split(';');\n        const emptyObject = {};\n        const headerParams = segments.slice(1)\n            .map((segment) => segment.trim().split('='))\n            .reduce((curr, params) => {\n            // Parse key=value pairs in the content-type header into properties of an object.\n            if (params.length === 2) {\n                const keyValuePair = {};\n                keyValuePair[params[0]] = params[1];\n                return Object.assign(curr, keyValuePair);\n            }\n            return curr;\n        }, emptyObject);\n        return headerParams.boundary;\n    }\n    uncompressResponse(res) {\n        // Uncompress the response body transparently if required.\n        let respStream = res;\n        const encodings = ['gzip', 'compress', 'deflate'];\n        if (res.headers['content-encoding'] && encodings.indexOf(res.headers['content-encoding']) !== -1) {\n            // Add the unzipper to the body stream processing pipeline.\n            const zlib = require('zlib'); // eslint-disable-line @typescript-eslint/no-var-requires\n            respStream = respStream.pipe(zlib.createUnzip());\n            // Remove the content-encoding in order to not confuse downstream operations.\n            delete res.headers['content-encoding'];\n        }\n        return respStream;\n    }\n    handleMultipartResponse(response, respStream, boundary) {\n        const busboy = require('@fastify/busboy'); // eslint-disable-line @typescript-eslint/no-var-requires\n        const multipartParser = new busboy.Dicer({ boundary });\n        const responseBuffer = [];\n        multipartParser.on('part', (part) => {\n            const tempBuffers = [];\n            part.on('data', (partData) => {\n                tempBuffers.push(partData);\n            });\n            part.on('end', () => {\n                responseBuffer.push(Buffer.concat(tempBuffers));\n            });\n        });\n        multipartParser.on('finish', () => {\n            response.data = undefined;\n            response.multipart = responseBuffer;\n            this.finalizeResponse(response);\n        });\n        respStream.pipe(multipartParser);\n    }\n    handleRegularResponse(response, respStream) {\n        const responseBuffer = [];\n        respStream.on('data', (chunk) => {\n            responseBuffer.push(chunk);\n        });\n        respStream.on('error', (err) => {\n            const req = response.request;\n            if (req && req.aborted) {\n                return;\n            }\n            this.enhanceAndReject(err, null, req);\n        });\n        respStream.on('end', () => {\n            response.data = Buffer.concat(responseBuffer).toString();\n            this.finalizeResponse(response);\n        });\n    }\n    /**\n     * Finalizes the current HTTP call in-flight by either resolving or rejecting the associated\n     * promise. In the event of an error, adds additional useful information to the returned error.\n     */\n    finalizeResponse(response) {\n        if (response.status >= 200 && response.status < 300) {\n            this.resolve(response);\n        }\n        else {\n            this.rejectWithError('Request failed with status code ' + response.status, null, response.request, response);\n        }\n    }\n    /**\n     * Creates a new error from the given message, and enhances it with other information available.\n     * Then the promise associated with this HTTP call is rejected with the resulting error.\n     */\n    rejectWithError(message, code, request, response) {\n        const error = new Error(message);\n        this.enhanceAndReject(error, code, request, response);\n    }\n    enhanceAndReject(error, code, request, response) {\n        this.reject(this.enhanceError(error, code, request, response));\n    }\n    /**\n     * Enhances the given error by adding more information to it. Specifically, the HttpRequestConfig,\n     * the underlying request and response will be attached to the error.\n     */\n    enhanceError(error, code, request, response) {\n        error.config = this.config;\n        if (code) {\n            error.code = code;\n        }\n        error.request = request;\n        error.response = response;\n        return error;\n    }\n}\n/**\n * An adapter class for extracting options and entity data from an HttpRequestConfig.\n */\nclass HttpRequestConfigImpl {\n    constructor(config) {\n        this.config = config;\n    }\n    get method() {\n        return this.config.method;\n    }\n    get url() {\n        return this.config.url;\n    }\n    get headers() {\n        return this.config.headers;\n    }\n    get data() {\n        return this.config.data;\n    }\n    get timeout() {\n        return this.config.timeout;\n    }\n    get httpAgent() {\n        return this.config.httpAgent;\n    }\n    buildRequestOptions() {\n        const parsed = this.buildUrl();\n        const protocol = parsed.protocol;\n        let port = parsed.port;\n        if (!port) {\n            const isHttps = protocol === 'https:';\n            port = isHttps ? '443' : '80';\n        }\n        return {\n            protocol,\n            hostname: parsed.hostname,\n            port,\n            path: parsed.path,\n            method: this.method,\n            agent: this.httpAgent,\n            headers: Object.assign({}, this.headers),\n        };\n    }\n    buildEntity(headers) {\n        let data;\n        if (!this.hasEntity() || !this.isEntityEnclosingRequest()) {\n            return data;\n        }\n        if (validator.isBuffer(this.data)) {\n            data = this.data;\n        }\n        else if (validator.isObject(this.data)) {\n            data = Buffer.from(JSON.stringify(this.data), 'utf-8');\n            if (typeof headers['content-type'] === 'undefined') {\n                headers['content-type'] = 'application/json;charset=utf-8';\n            }\n        }\n        else if (validator.isString(this.data)) {\n            data = Buffer.from(this.data, 'utf-8');\n        }\n        else {\n            throw new Error('Request data must be a string, a Buffer or a json serializable object');\n        }\n        // Add Content-Length header if data exists.\n        headers['Content-Length'] = data.length.toString();\n        return data;\n    }\n    buildUrl() {\n        const fullUrl = this.urlWithProtocol();\n        if (!this.hasEntity() || this.isEntityEnclosingRequest()) {\n            return url.parse(fullUrl);\n        }\n        if (!validator.isObject(this.data)) {\n            throw new Error(`${this.method} requests cannot have a body`);\n        }\n        // Parse URL and append data to query string.\n        const parsedUrl = new url.URL(fullUrl);\n        const dataObj = this.data;\n        for (const key in dataObj) {\n            if (Object.prototype.hasOwnProperty.call(dataObj, key)) {\n                parsedUrl.searchParams.append(key, dataObj[key]);\n            }\n        }\n        return url.parse(parsedUrl.toString());\n    }\n    urlWithProtocol() {\n        const fullUrl = this.url;\n        if (fullUrl.startsWith('http://') || fullUrl.startsWith('https://')) {\n            return fullUrl;\n        }\n        return `https://${fullUrl}`;\n    }\n    hasEntity() {\n        return !!this.data;\n    }\n    isEntityEnclosingRequest() {\n        // GET and HEAD requests do not support entity (body) in request.\n        return this.method !== 'GET' && this.method !== 'HEAD';\n    }\n}\nclass AuthorizedHttpClient extends HttpClient {\n    constructor(app) {\n        super();\n        this.app = app;\n    }\n    send(request) {\n        return this.getToken().then((token) => {\n            const requestCopy = Object.assign({}, request);\n            requestCopy.headers = Object.assign({}, request.headers);\n            const authHeader = 'Authorization';\n            requestCopy.headers[authHeader] = `Bearer ${token}`;\n            if (!requestCopy.httpAgent && this.app.options.httpAgent) {\n                requestCopy.httpAgent = this.app.options.httpAgent;\n            }\n            return super.send(requestCopy);\n        });\n    }\n    getToken() {\n        return this.app.INTERNAL.getToken()\n            .then((accessTokenObj) => {\n            return accessTokenObj.accessToken;\n        });\n    }\n}\nexports.AuthorizedHttpClient = AuthorizedHttpClient;\n/**\n * Class that defines all the settings for the backend API endpoint.\n *\n * @param endpoint - The Firebase Auth backend endpoint.\n * @param httpMethod - The http method for that endpoint.\n * @constructor\n */\nclass ApiSettings {\n    constructor(endpoint, httpMethod = 'POST') {\n        this.endpoint = endpoint;\n        this.httpMethod = httpMethod;\n        this.setRequestValidator(null)\n            .setResponseValidator(null);\n    }\n    /** @returns The backend API endpoint. */\n    getEndpoint() {\n        return this.endpoint;\n    }\n    /** @returns The request HTTP method. */\n    getHttpMethod() {\n        return this.httpMethod;\n    }\n    /**\n     * @param requestValidator - The request validator.\n     * @returns The current API settings instance.\n     */\n    setRequestValidator(requestValidator) {\n        const nullFunction = () => undefined;\n        this.requestValidator = requestValidator || nullFunction;\n        return this;\n    }\n    /** @returns The request validator. */\n    getRequestValidator() {\n        return this.requestValidator;\n    }\n    /**\n     * @param responseValidator - The response validator.\n     * @returns The current API settings instance.\n     */\n    setResponseValidator(responseValidator) {\n        const nullFunction = () => undefined;\n        this.responseValidator = responseValidator || nullFunction;\n        return this;\n    }\n    /** @returns The response validator. */\n    getResponseValidator() {\n        return this.responseValidator;\n    }\n}\nexports.ApiSettings = ApiSettings;\n/**\n * Class used for polling an endpoint with exponential backoff.\n *\n * Example usage:\n * ```\n * const poller = new ExponentialBackoffPoller();\n * poller\n *     .poll(() => {\n *       return myRequestToPoll()\n *           .then((responseData: any) => {\n *             if (!isValid(responseData)) {\n *               // Continue polling.\n *               return null;\n *             }\n *\n *             // Polling complete. Resolve promise with final response data.\n *             return responseData;\n *           });\n *     })\n *     .then((responseData: any) => {\n *       console.log(`Final response: ${responseData}`);\n *     });\n * ```\n */\nclass ExponentialBackoffPoller extends events_1.EventEmitter {\n    constructor(initialPollingDelayMillis = 1000, maxPollingDelayMillis = 10000, masterTimeoutMillis = 60000) {\n        super();\n        this.initialPollingDelayMillis = initialPollingDelayMillis;\n        this.maxPollingDelayMillis = maxPollingDelayMillis;\n        this.masterTimeoutMillis = masterTimeoutMillis;\n        this.numTries = 0;\n        this.completed = false;\n    }\n    /**\n     * Poll the provided callback with exponential backoff.\n     *\n     * @param callback - The callback to be called for each poll. If the\n     *     callback resolves to a falsey value, polling will continue. Otherwise, the truthy\n     *     resolution will be used to resolve the promise returned by this method.\n     * @returns A Promise which resolves to the truthy value returned by the provided\n     *     callback when polling is complete.\n     */\n    poll(callback) {\n        if (this.pollCallback) {\n            throw new Error('poll() can only be called once per instance of ExponentialBackoffPoller');\n        }\n        this.pollCallback = callback;\n        this.on('poll', this.repoll);\n        this.masterTimer = setTimeout(() => {\n            if (this.completed) {\n                return;\n            }\n            this.markCompleted();\n            this.reject(new Error('ExponentialBackoffPoller deadline exceeded - Master timeout reached'));\n        }, this.masterTimeoutMillis);\n        return new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n            this.repoll();\n        });\n    }\n    repoll() {\n        this.pollCallback()\n            .then((result) => {\n            if (this.completed) {\n                return;\n            }\n            if (!result) {\n                this.repollTimer =\n                    setTimeout(() => this.emit('poll'), this.getPollingDelayMillis());\n                this.numTries++;\n                return;\n            }\n            this.markCompleted();\n            this.resolve(result);\n        })\n            .catch((err) => {\n            if (this.completed) {\n                return;\n            }\n            this.markCompleted();\n            this.reject(err);\n        });\n    }\n    getPollingDelayMillis() {\n        const increasedPollingDelay = Math.pow(2, this.numTries) * this.initialPollingDelayMillis;\n        return Math.min(increasedPollingDelay, this.maxPollingDelayMillis);\n    }\n    markCompleted() {\n        this.completed = true;\n        if (this.masterTimer) {\n            clearTimeout(this.masterTimer);\n        }\n        if (this.repollTimer) {\n            clearTimeout(this.repollTimer);\n        }\n    }\n}\nexports.ExponentialBackoffPoller = ExponentialBackoffPoller;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}