{"ast":null,"code":"/*! firebase-admin v11.5.0 */\n\"use strict\";\n\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FirebaseAppCheckError = exports.APP_CHECK_ERROR_CODE_MAPPING = exports.AppCheckApiClient = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst error_1 = require(\"../utils/error\");\nconst utils = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\n// App Check backend constants\nconst FIREBASE_APP_CHECK_V1_API_URL_FORMAT = 'https://firebaseappcheck.googleapis.com/v1/projects/{projectId}/apps/{appId}:exchangeCustomToken';\nconst FIREBASE_APP_CHECK_CONFIG_HEADERS = {\n  'X-Firebase-Client': `fire-admin-node/${utils.getSdkVersion()}`\n};\n/**\n * Class that facilitates sending requests to the Firebase App Check backend API.\n *\n * @internal\n */\nclass AppCheckApiClient {\n  constructor(app) {\n    this.app = app;\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new FirebaseAppCheckError('invalid-argument', 'First argument passed to admin.appCheck() must be a valid Firebase app instance.');\n    }\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n  }\n  /**\n   * Exchange a signed custom token to App Check token\n   *\n   * @param customToken - The custom token to be exchanged.\n   * @param appId - The mobile App ID.\n   * @returns A promise that fulfills with a `AppCheckToken`.\n   */\n  exchangeToken(customToken, appId) {\n    if (!validator.isNonEmptyString(appId)) {\n      throw new FirebaseAppCheckError('invalid-argument', '`appId` must be a non-empty string.');\n    }\n    if (!validator.isNonEmptyString(customToken)) {\n      throw new FirebaseAppCheckError('invalid-argument', '`customToken` must be a non-empty string.');\n    }\n    return this.getUrl(appId).then(url => {\n      const request = {\n        method: 'POST',\n        url,\n        headers: FIREBASE_APP_CHECK_CONFIG_HEADERS,\n        data: {\n          customToken\n        }\n      };\n      return this.httpClient.send(request);\n    }).then(resp => {\n      return this.toAppCheckToken(resp);\n    }).catch(err => {\n      throw this.toFirebaseError(err);\n    });\n  }\n  getUrl(appId) {\n    return this.getProjectId().then(projectId => {\n      const urlParams = {\n        projectId,\n        appId\n      };\n      const baseUrl = utils.formatString(FIREBASE_APP_CHECK_V1_API_URL_FORMAT, urlParams);\n      return utils.formatString(baseUrl);\n    });\n  }\n  getProjectId() {\n    if (this.projectId) {\n      return Promise.resolve(this.projectId);\n    }\n    return utils.findProjectId(this.app).then(projectId => {\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new FirebaseAppCheckError('unknown-error', 'Failed to determine project ID. Initialize the ' + 'SDK with service account credentials or set project ID as an app option. ' + 'Alternatively, set the GOOGLE_CLOUD_PROJECT environment variable.');\n      }\n      this.projectId = projectId;\n      return projectId;\n    });\n  }\n  toFirebaseError(err) {\n    if (err instanceof error_1.PrefixedFirebaseError) {\n      return err;\n    }\n    const response = err.response;\n    if (!response.isJson()) {\n      return new FirebaseAppCheckError('unknown-error', `Unexpected response with status: ${response.status} and body: ${response.text}`);\n    }\n    const error = response.data.error || {};\n    let code = 'unknown-error';\n    if (error.status && error.status in exports.APP_CHECK_ERROR_CODE_MAPPING) {\n      code = exports.APP_CHECK_ERROR_CODE_MAPPING[error.status];\n    }\n    const message = error.message || `Unknown server error: ${response.text}`;\n    return new FirebaseAppCheckError(code, message);\n  }\n  /**\n   * Creates an AppCheckToken from the API response.\n   *\n   * @param resp - API response object.\n   * @returns An AppCheckToken instance.\n   */\n  toAppCheckToken(resp) {\n    const token = resp.data.token;\n    // `ttl` is a string with the suffix \"s\" preceded by the number of seconds,\n    // with nanoseconds expressed as fractional seconds.\n    const ttlMillis = this.stringToMilliseconds(resp.data.ttl);\n    return {\n      token,\n      ttlMillis\n    };\n  }\n  /**\n   * Converts a duration string with the suffix `s` to milliseconds.\n   *\n   * @param duration - The duration as a string with the suffix \"s\" preceded by the\n   * number of seconds, with fractional seconds. For example, 3 seconds with 0 nanoseconds\n   * is expressed as \"3s\", while 3 seconds and 1 nanosecond is expressed as \"3.000000001s\",\n   * and 3 seconds and 1 microsecond is expressed as \"3.000001s\".\n   *\n   * @returns The duration in milliseconds.\n   */\n  stringToMilliseconds(duration) {\n    if (!validator.isNonEmptyString(duration) || !duration.endsWith('s')) {\n      throw new FirebaseAppCheckError('invalid-argument', '`ttl` must be a valid duration string with the suffix `s`.');\n    }\n    const seconds = duration.slice(0, -1);\n    return Math.floor(Number(seconds) * 1000);\n  }\n}\nexports.AppCheckApiClient = AppCheckApiClient;\nexports.APP_CHECK_ERROR_CODE_MAPPING = {\n  ABORTED: 'aborted',\n  INVALID_ARGUMENT: 'invalid-argument',\n  INVALID_CREDENTIAL: 'invalid-credential',\n  INTERNAL: 'internal-error',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  NOT_FOUND: 'not-found',\n  UNKNOWN: 'unknown-error'\n};\n/**\n * Firebase App Check error code structure. This extends PrefixedFirebaseError.\n *\n * @param code - The error code.\n * @param message - The error message.\n * @constructor\n */\nclass FirebaseAppCheckError extends error_1.PrefixedFirebaseError {\n  constructor(code, message) {\n    super('app-check', code, message);\n    /* tslint:disable:max-line-length */\n    // Set the prototype explicitly. See the following link for more details:\n    // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    /* tslint:enable:max-line-length */\n    this.__proto__ = FirebaseAppCheckError.prototype;\n  }\n}\nexports.FirebaseAppCheckError = FirebaseAppCheckError;","map":{"version":3,"names":["Object","defineProperty","exports","value","FirebaseAppCheckError","APP_CHECK_ERROR_CODE_MAPPING","AppCheckApiClient","api_request_1","require","error_1","utils","validator","FIREBASE_APP_CHECK_V1_API_URL_FORMAT","FIREBASE_APP_CHECK_CONFIG_HEADERS","getSdkVersion","constructor","app","isNonNullObject","httpClient","AuthorizedHttpClient","exchangeToken","customToken","appId","isNonEmptyString","getUrl","then","url","request","method","headers","data","send","resp","toAppCheckToken","catch","err","toFirebaseError","getProjectId","projectId","urlParams","baseUrl","formatString","Promise","resolve","findProjectId","PrefixedFirebaseError","response","isJson","status","text","error","code","message","token","ttlMillis","stringToMilliseconds","ttl","duration","endsWith","seconds","slice","Math","floor","Number","ABORTED","INVALID_ARGUMENT","INVALID_CREDENTIAL","INTERNAL","PERMISSION_DENIED","UNAUTHENTICATED","NOT_FOUND","UNKNOWN","__proto__","prototype"],"sources":["/home/yusuf/coding/portfolio/node_modules/firebase-admin/lib/app-check/app-check-api-client-internal.js"],"sourcesContent":["/*! firebase-admin v11.5.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FirebaseAppCheckError = exports.APP_CHECK_ERROR_CODE_MAPPING = exports.AppCheckApiClient = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst error_1 = require(\"../utils/error\");\nconst utils = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\n// App Check backend constants\nconst FIREBASE_APP_CHECK_V1_API_URL_FORMAT = 'https://firebaseappcheck.googleapis.com/v1/projects/{projectId}/apps/{appId}:exchangeCustomToken';\nconst FIREBASE_APP_CHECK_CONFIG_HEADERS = {\n    'X-Firebase-Client': `fire-admin-node/${utils.getSdkVersion()}`\n};\n/**\n * Class that facilitates sending requests to the Firebase App Check backend API.\n *\n * @internal\n */\nclass AppCheckApiClient {\n    constructor(app) {\n        this.app = app;\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new FirebaseAppCheckError('invalid-argument', 'First argument passed to admin.appCheck() must be a valid Firebase app instance.');\n        }\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    }\n    /**\n     * Exchange a signed custom token to App Check token\n     *\n     * @param customToken - The custom token to be exchanged.\n     * @param appId - The mobile App ID.\n     * @returns A promise that fulfills with a `AppCheckToken`.\n     */\n    exchangeToken(customToken, appId) {\n        if (!validator.isNonEmptyString(appId)) {\n            throw new FirebaseAppCheckError('invalid-argument', '`appId` must be a non-empty string.');\n        }\n        if (!validator.isNonEmptyString(customToken)) {\n            throw new FirebaseAppCheckError('invalid-argument', '`customToken` must be a non-empty string.');\n        }\n        return this.getUrl(appId)\n            .then((url) => {\n            const request = {\n                method: 'POST',\n                url,\n                headers: FIREBASE_APP_CHECK_CONFIG_HEADERS,\n                data: { customToken }\n            };\n            return this.httpClient.send(request);\n        })\n            .then((resp) => {\n            return this.toAppCheckToken(resp);\n        })\n            .catch((err) => {\n            throw this.toFirebaseError(err);\n        });\n    }\n    getUrl(appId) {\n        return this.getProjectId()\n            .then((projectId) => {\n            const urlParams = {\n                projectId,\n                appId,\n            };\n            const baseUrl = utils.formatString(FIREBASE_APP_CHECK_V1_API_URL_FORMAT, urlParams);\n            return utils.formatString(baseUrl);\n        });\n    }\n    getProjectId() {\n        if (this.projectId) {\n            return Promise.resolve(this.projectId);\n        }\n        return utils.findProjectId(this.app)\n            .then((projectId) => {\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new FirebaseAppCheckError('unknown-error', 'Failed to determine project ID. Initialize the '\n                    + 'SDK with service account credentials or set project ID as an app option. '\n                    + 'Alternatively, set the GOOGLE_CLOUD_PROJECT environment variable.');\n            }\n            this.projectId = projectId;\n            return projectId;\n        });\n    }\n    toFirebaseError(err) {\n        if (err instanceof error_1.PrefixedFirebaseError) {\n            return err;\n        }\n        const response = err.response;\n        if (!response.isJson()) {\n            return new FirebaseAppCheckError('unknown-error', `Unexpected response with status: ${response.status} and body: ${response.text}`);\n        }\n        const error = response.data.error || {};\n        let code = 'unknown-error';\n        if (error.status && error.status in exports.APP_CHECK_ERROR_CODE_MAPPING) {\n            code = exports.APP_CHECK_ERROR_CODE_MAPPING[error.status];\n        }\n        const message = error.message || `Unknown server error: ${response.text}`;\n        return new FirebaseAppCheckError(code, message);\n    }\n    /**\n     * Creates an AppCheckToken from the API response.\n     *\n     * @param resp - API response object.\n     * @returns An AppCheckToken instance.\n     */\n    toAppCheckToken(resp) {\n        const token = resp.data.token;\n        // `ttl` is a string with the suffix \"s\" preceded by the number of seconds,\n        // with nanoseconds expressed as fractional seconds.\n        const ttlMillis = this.stringToMilliseconds(resp.data.ttl);\n        return {\n            token,\n            ttlMillis\n        };\n    }\n    /**\n     * Converts a duration string with the suffix `s` to milliseconds.\n     *\n     * @param duration - The duration as a string with the suffix \"s\" preceded by the\n     * number of seconds, with fractional seconds. For example, 3 seconds with 0 nanoseconds\n     * is expressed as \"3s\", while 3 seconds and 1 nanosecond is expressed as \"3.000000001s\",\n     * and 3 seconds and 1 microsecond is expressed as \"3.000001s\".\n     *\n     * @returns The duration in milliseconds.\n     */\n    stringToMilliseconds(duration) {\n        if (!validator.isNonEmptyString(duration) || !duration.endsWith('s')) {\n            throw new FirebaseAppCheckError('invalid-argument', '`ttl` must be a valid duration string with the suffix `s`.');\n        }\n        const seconds = duration.slice(0, -1);\n        return Math.floor(Number(seconds) * 1000);\n    }\n}\nexports.AppCheckApiClient = AppCheckApiClient;\nexports.APP_CHECK_ERROR_CODE_MAPPING = {\n    ABORTED: 'aborted',\n    INVALID_ARGUMENT: 'invalid-argument',\n    INVALID_CREDENTIAL: 'invalid-credential',\n    INTERNAL: 'internal-error',\n    PERMISSION_DENIED: 'permission-denied',\n    UNAUTHENTICATED: 'unauthenticated',\n    NOT_FOUND: 'not-found',\n    UNKNOWN: 'unknown-error',\n};\n/**\n * Firebase App Check error code structure. This extends PrefixedFirebaseError.\n *\n * @param code - The error code.\n * @param message - The error message.\n * @constructor\n */\nclass FirebaseAppCheckError extends error_1.PrefixedFirebaseError {\n    constructor(code, message) {\n        super('app-check', code, message);\n        /* tslint:disable:max-line-length */\n        // Set the prototype explicitly. See the following link for more details:\n        // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        /* tslint:enable:max-line-length */\n        this.__proto__ = FirebaseAppCheckError.prototype;\n    }\n}\nexports.FirebaseAppCheckError = FirebaseAppCheckError;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}