{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.wrapError = exports.silencePromise = exports.getRetryParams = exports.getRetryCodes = exports.isPermanentRpcError = exports.isFunction = exports.isEmpty = exports.isPlainObject = exports.isObject = exports.requestTag = exports.autoId = exports.Deferred = void 0;\nconst crypto_1 = require(\"crypto\");\nconst gapicConfig = require(\"./v1/firestore_client_config.json\");\n/**\n * A Promise implementation that supports deferred resolution.\n * @private\n * @internal\n */\nclass Deferred {\n  constructor() {\n    this.resolve = () => {};\n    this.reject = () => {};\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\nexports.Deferred = Deferred;\n/**\n * Generate a unique client-side identifier.\n *\n * Used for the creation of new documents.\n *\n * @private\n * @internal\n * @returns {string} A unique 20-character wide identifier.\n */\nfunction autoId() {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let autoId = '';\n  while (autoId.length < 20) {\n    const bytes = (0, crypto_1.randomBytes)(40);\n    bytes.forEach(b => {\n      // Length of `chars` is 62. We only take bytes between 0 and 62*4-1\n      // (both inclusive). The value is then evenly mapped to indices of `char`\n      // via a modulo operation.\n      const maxValue = 62 * 4 - 1;\n      if (autoId.length < 20 && b <= maxValue) {\n        autoId += chars.charAt(b % 62);\n      }\n    });\n  }\n  return autoId;\n}\nexports.autoId = autoId;\n/**\n * Generate a short and semi-random client-side identifier.\n *\n * Used for the creation of request tags.\n *\n * @private\n * @internal\n * @returns {string} A random 5-character wide identifier.\n */\nfunction requestTag() {\n  return autoId().substr(0, 5);\n}\nexports.requestTag = requestTag;\n/**\n * Determines whether `value` is a JavaScript object.\n *\n * @private\n * @internal\n */\nfunction isObject(value) {\n  return Object.prototype.toString.call(value) === '[object Object]';\n}\nexports.isObject = isObject;\n/**\n * Verifies that 'obj' is a plain JavaScript object that can be encoded as a\n * 'Map' in Firestore.\n *\n * @private\n * @internal\n * @param input The argument to verify.\n * @returns 'true' if the input can be a treated as a plain object.\n */\nfunction isPlainObject(input) {\n  return isObject(input) && (Object.getPrototypeOf(input) === Object.prototype || Object.getPrototypeOf(input) === null || input.constructor.name === 'Object');\n}\nexports.isPlainObject = isPlainObject;\n/**\n * Returns whether `value` has no custom properties.\n *\n * @private\n * @internal\n */\nfunction isEmpty(value) {\n  return Object.keys(value).length === 0;\n}\nexports.isEmpty = isEmpty;\n/**\n * Determines whether `value` is a JavaScript function.\n *\n * @private\n * @internal\n */\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\nexports.isFunction = isFunction;\n/**\n * Determines whether the provided error is considered permanent for the given\n * RPC.\n *\n * @private\n * @internal\n */\nfunction isPermanentRpcError(err, methodName) {\n  if (err.code !== undefined) {\n    const retryCodes = getRetryCodes(methodName);\n    return retryCodes.indexOf(err.code) === -1;\n  } else {\n    return false;\n  }\n}\nexports.isPermanentRpcError = isPermanentRpcError;\nlet serviceConfig;\n/** Lazy-loads the service config when first accessed. */\nfunction getServiceConfig(methodName) {\n  if (!serviceConfig) {\n    serviceConfig = require('google-gax/build/src/fallback').constructSettings('google.firestore.v1.Firestore', gapicConfig, {}, require('google-gax/build/src/status').Status);\n  }\n  return serviceConfig[methodName];\n}\n/**\n * Returns the list of retryable error codes specified in the service\n * configuration.\n * @private\n * @internal\n */\nfunction getRetryCodes(methodName) {\n  var _a, _b, _c;\n  return (_c = (_b = (_a = getServiceConfig(methodName)) === null || _a === void 0 ? void 0 : _a.retry) === null || _b === void 0 ? void 0 : _b.retryCodes) !== null && _c !== void 0 ? _c : [];\n}\nexports.getRetryCodes = getRetryCodes;\n/**\n * Returns the backoff setting from the service configuration.\n * @private\n * @internal\n */\nfunction getRetryParams(methodName) {\n  var _a, _b, _c;\n  return (_c = (_b = (_a = getServiceConfig(methodName)) === null || _a === void 0 ? void 0 : _a.retry) === null || _b === void 0 ? void 0 : _b.backoffSettings) !== null && _c !== void 0 ? _c : require('google-gax/build/src/fallback').createDefaultBackoffSettings();\n}\nexports.getRetryParams = getRetryParams;\n/**\n * Returns a promise with a void return type. The returned promise swallows all\n * errors and never throws.\n *\n * This is primarily used to wait for a promise to complete when the result of\n * the promise will be discarded.\n *\n * @private\n * @internal\n */\nfunction silencePromise(promise) {\n  return promise.then(() => {}, () => {});\n}\nexports.silencePromise = silencePromise;\n/**\n * Wraps the provided error in a new error that includes the provided stack.\n *\n * Used to preserve stack traces across async calls.\n * @private\n * @internal\n */\nfunction wrapError(err, stack) {\n  err.stack += '\\nCaused by: ' + stack;\n  return err;\n}\nexports.wrapError = wrapError;","map":{"version":3,"names":["Object","defineProperty","exports","value","wrapError","silencePromise","getRetryParams","getRetryCodes","isPermanentRpcError","isFunction","isEmpty","isPlainObject","isObject","requestTag","autoId","Deferred","crypto_1","require","gapicConfig","constructor","resolve","reject","promise","Promise","chars","length","bytes","randomBytes","forEach","b","maxValue","charAt","substr","prototype","toString","call","input","getPrototypeOf","name","keys","err","methodName","code","undefined","retryCodes","indexOf","serviceConfig","getServiceConfig","constructSettings","Status","_a","_b","_c","retry","backoffSettings","createDefaultBackoffSettings","then","stack"],"sources":["/home/yusuf/coding/portfolio/node_modules/@google-cloud/firestore/build/src/util.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wrapError = exports.silencePromise = exports.getRetryParams = exports.getRetryCodes = exports.isPermanentRpcError = exports.isFunction = exports.isEmpty = exports.isPlainObject = exports.isObject = exports.requestTag = exports.autoId = exports.Deferred = void 0;\nconst crypto_1 = require(\"crypto\");\nconst gapicConfig = require(\"./v1/firestore_client_config.json\");\n/**\n * A Promise implementation that supports deferred resolution.\n * @private\n * @internal\n */\nclass Deferred {\n    constructor() {\n        this.resolve = () => { };\n        this.reject = () => { };\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexports.Deferred = Deferred;\n/**\n * Generate a unique client-side identifier.\n *\n * Used for the creation of new documents.\n *\n * @private\n * @internal\n * @returns {string} A unique 20-character wide identifier.\n */\nfunction autoId() {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let autoId = '';\n    while (autoId.length < 20) {\n        const bytes = (0, crypto_1.randomBytes)(40);\n        bytes.forEach(b => {\n            // Length of `chars` is 62. We only take bytes between 0 and 62*4-1\n            // (both inclusive). The value is then evenly mapped to indices of `char`\n            // via a modulo operation.\n            const maxValue = 62 * 4 - 1;\n            if (autoId.length < 20 && b <= maxValue) {\n                autoId += chars.charAt(b % 62);\n            }\n        });\n    }\n    return autoId;\n}\nexports.autoId = autoId;\n/**\n * Generate a short and semi-random client-side identifier.\n *\n * Used for the creation of request tags.\n *\n * @private\n * @internal\n * @returns {string} A random 5-character wide identifier.\n */\nfunction requestTag() {\n    return autoId().substr(0, 5);\n}\nexports.requestTag = requestTag;\n/**\n * Determines whether `value` is a JavaScript object.\n *\n * @private\n * @internal\n */\nfunction isObject(value) {\n    return Object.prototype.toString.call(value) === '[object Object]';\n}\nexports.isObject = isObject;\n/**\n * Verifies that 'obj' is a plain JavaScript object that can be encoded as a\n * 'Map' in Firestore.\n *\n * @private\n * @internal\n * @param input The argument to verify.\n * @returns 'true' if the input can be a treated as a plain object.\n */\nfunction isPlainObject(input) {\n    return (isObject(input) &&\n        (Object.getPrototypeOf(input) === Object.prototype ||\n            Object.getPrototypeOf(input) === null ||\n            input.constructor.name === 'Object'));\n}\nexports.isPlainObject = isPlainObject;\n/**\n * Returns whether `value` has no custom properties.\n *\n * @private\n * @internal\n */\nfunction isEmpty(value) {\n    return Object.keys(value).length === 0;\n}\nexports.isEmpty = isEmpty;\n/**\n * Determines whether `value` is a JavaScript function.\n *\n * @private\n * @internal\n */\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nexports.isFunction = isFunction;\n/**\n * Determines whether the provided error is considered permanent for the given\n * RPC.\n *\n * @private\n * @internal\n */\nfunction isPermanentRpcError(err, methodName) {\n    if (err.code !== undefined) {\n        const retryCodes = getRetryCodes(methodName);\n        return retryCodes.indexOf(err.code) === -1;\n    }\n    else {\n        return false;\n    }\n}\nexports.isPermanentRpcError = isPermanentRpcError;\nlet serviceConfig;\n/** Lazy-loads the service config when first accessed. */\nfunction getServiceConfig(methodName) {\n    if (!serviceConfig) {\n        serviceConfig = require('google-gax/build/src/fallback').constructSettings('google.firestore.v1.Firestore', gapicConfig, {}, require('google-gax/build/src/status').Status);\n    }\n    return serviceConfig[methodName];\n}\n/**\n * Returns the list of retryable error codes specified in the service\n * configuration.\n * @private\n * @internal\n */\nfunction getRetryCodes(methodName) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = getServiceConfig(methodName)) === null || _a === void 0 ? void 0 : _a.retry) === null || _b === void 0 ? void 0 : _b.retryCodes) !== null && _c !== void 0 ? _c : [];\n}\nexports.getRetryCodes = getRetryCodes;\n/**\n * Returns the backoff setting from the service configuration.\n * @private\n * @internal\n */\nfunction getRetryParams(methodName) {\n    var _a, _b, _c;\n    return ((_c = (_b = (_a = getServiceConfig(methodName)) === null || _a === void 0 ? void 0 : _a.retry) === null || _b === void 0 ? void 0 : _b.backoffSettings) !== null && _c !== void 0 ? _c : require('google-gax/build/src/fallback').createDefaultBackoffSettings());\n}\nexports.getRetryParams = getRetryParams;\n/**\n * Returns a promise with a void return type. The returned promise swallows all\n * errors and never throws.\n *\n * This is primarily used to wait for a promise to complete when the result of\n * the promise will be discarded.\n *\n * @private\n * @internal\n */\nfunction silencePromise(promise) {\n    return promise.then(() => { }, () => { });\n}\nexports.silencePromise = silencePromise;\n/**\n * Wraps the provided error in a new error that includes the provided stack.\n *\n * Used to preserve stack traces across async calls.\n * @private\n * @internal\n */\nfunction wrapError(err, stack) {\n    err.stack += '\\nCaused by: ' + stack;\n    return err;\n}\nexports.wrapError = wrapError;\n//# sourceMappingURL=util.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}